{"version":3,"file":"swal-partial.directive.d.ts","sources":["swal-partial.directive.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { ApplicationRef, ComponentFactoryResolver, Injector, OnDestroy, OnInit, TemplateRef } from '@angular/core';\nimport { SwalPartialTargets } from './swal-partial-targets';\nimport { SwalComponent } from './swal.component';\n/**\n * A structural directive that lets you use Angular templates inside of Sweet Alerts.\n * There are different targetable zones in a Sweet Alert: title, content, confirmButton, cancelButton, buttonsWrapper.\n * The default target is the content zone.\n *\n * Usage in your component's TypeScript code-behind (if you use another target than \"content\"):\n *\n *     @Component({ ... })\n *     export class MyComponent {\n *         public constructor(public readonly swalTargets: SwalPartialTargets) {\n *         }\n *     }\n *\n * Usage in the template:\n *\n *     <swal title=\"Fill the form\" (confirm)=\"confirmHandler()\">\n *         <!-- This form will be displayed as the alert main content\n *              Targets the alert's main content zone by default -->\n *         <form *swalPartial [formControl]=\"myForm\">\n *             ...\n *         </form>\n *\n *         <!-- This targets the confirm button's inner content\n *              Notice the usage of ng-container to avoid creating an useless DOM element inside the button -->\n *         <ng-container *swalPartial=\"swalTargets.confirmButton\">\n *              Send ({{ secondsLeft }} seconds left)\n *         </ng-container>\n *     <swal>\n */\nexport declare class SwalPartialDirective implements OnInit, OnDestroy {\n    private readonly resolver;\n    private readonly injector;\n    private readonly app;\n    private readonly templateRef;\n    private readonly swalTargets;\n    private readonly swalComponent;\n    /**\n     * Takes a \"partial target\" or nothing (will target main content zone by default).\n     *\n     * See the {@link SwalPartialTargets} service to see the available targets.\n     * See the class doc block for more informations.\n     */\n    swalPartial: () => HTMLElement;\n    /**\n     * Holds the component reference of the controlled SwalPartialComponent to destroy it when no longer needed.\n     */\n    private partialRef;\n    private beforeOpenSubscription;\n    private closeSubscription;\n    constructor(resolver: ComponentFactoryResolver, injector: Injector, app: ApplicationRef, templateRef: TemplateRef<any>, swalTargets: SwalPartialTargets, swalComponent: SwalComponent);\n    /**\n     * Subscribes to the the Sweet Alert appearance/disappearance to create/destroy the SwalPartialComponent that will\n     * receive the consumer's template.\n     */\n    ngOnInit(): void;\n    /**\n     * Unsubscribes from the Sweet Alert appearance/disappearance.\n     */\n    ngOnDestroy(): void;\n}\n"]}