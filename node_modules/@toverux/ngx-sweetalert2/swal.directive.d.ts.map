{"version":3,"file":"swal.directive.d.ts","sources":["swal.directive.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { ComponentFactoryResolver, EventEmitter, OnDestroy, OnInit, ViewContainerRef } from '@angular/core';\nimport { SweetAlertOptions, SweetAlertArrayOptions } from 'sweetalert2';\nimport { SwalComponent } from './swal.component';\n/**\n * [swal] directive. It takes a value that defines the Sweet Alert and can be of three types:\n *\n * 1) A simple array of two or three strings defining [title, text, type] - the type being optional, ex:\n *\n *    <button [swal]=\"['Title', 'Text']\">Click me</button>\n *\n * 2) A native SweetAlert2 options object, ex:\n *\n *    <button [swal]=\"{ title: 'Title', text: 'Text' }\">Click me</button>\n *\n * 3) A reference to an existing SwalComponent instance for more advanced uses, ex:\n *\n *    <button [swal]=\"mySwal\">Click me</button>\n *    <swal #mySwal title=\"Title\" text=\"Text\"></swal>\n */\nexport declare class SwalDirective implements OnInit, OnDestroy {\n    private readonly viewContainerRef;\n    private readonly resolver;\n    /**\n     * SweetAlert2 options or a SwalComponent instance.\n     * See the class doc block for more informations.\n     */\n    swal: SwalComponent | SweetAlertOptions | SweetAlertArrayOptions;\n    /**\n     * Emits when the user clicks \"Confirm\".\n     * Bears a value when using \"input\", resolved \"preConfirm\", etc.\n     *\n     * Example:\n     *     public handleConfirm(email: string): void {\n     *         // ... save user email\n     *     }\n     */\n    readonly confirm: EventEmitter<any>;\n    /**\n     * Emits when the user clicks \"Cancel\" (or dismisses the modal by any other way).\n     * By default, it will emit a string representing the reason for which the SweetAlert has been closed, or the\n     * value of a rejected \"preConfirm\".\n     *\n     * Example:\n     *     public handleCancel(reason: string): void {\n     *         // reason can be 'cancel', 'overlay', 'close', and 'timer'\n     *         // ... do something\n     *     }\n     */\n    readonly cancel: EventEmitter<any>;\n    /**\n     * When the user does not provides a SwalComponent instance, we create it on-the-fly and assign the plain-object\n     * options to it.\n     * This fields keeps a reference to the dynamically-created <swal>, to destroy it along this directive instance.\n     */\n    private swalRef;\n    /**\n     * An instance of the <swal> component that this directive controls.\n     * Could be an instance passed by the user, otherwise it's the instance we've dynamically created.\n     */\n    private swalInstance;\n    /**\n     * Holds the native SweetAlert2 options.\n     * Empty when the user passed an existing SwalComponent instance.\n     */\n    private swalOptions;\n    constructor(viewContainerRef: ViewContainerRef, resolver: ComponentFactoryResolver);\n    /**\n     * OnInit lifecycle handler.\n     * Creates a SwalComponent instance if the user didn't provided one and binds on that component (confirm) and\n     * (cancel) outputs to reemit on the directive.\n     */\n    ngOnInit(): void;\n    /**\n     * OnDestroy lifecycle handler.\n     * Destroys the dynamically-created SwalComponent and unsubscribes from that component's (confirm) and (cancel).\n     */\n    ngOnDestroy(): void;\n    /**\n     * Click handler.\n     * The directive listens for onclick events on its host element.\n     * When this happens, it shows the <swal> attached to this directive.\n     */\n    onHostClicked(event: MouseEvent): void;\n}\n"]}