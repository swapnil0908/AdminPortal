{"version":3,"file":"swal.component.d.ts","sources":["swal.component.d.ts"],"names":[],"mappingssourcesContent":["import { EventEmitter, OnChanges, OnDestroy, SimpleChanges } from '@angular/core';\nimport swal, { SweetAlertOptions } from 'sweetalert2';\nimport * as events from './swal-events';\n/**\n * <swal> component. See the README.md for usage.\n *\n * It contains a bunch of @Inputs that have a perfect 1:1 mapping with SweetAlert2 options.\n * Their types are directly coming from SweetAlert2 types defintitions, meaning that ngx-sweetalert2 is tightly coupled\n * to SweetAlert2, but also is type-safe.\n *\n * /!\\ Some SweetAlert options aren't @Inputs but @Outputs: onBeforeOpen, onOpen, and onClose (without \"on*\" prefix).\n *     However, preConfirm and inputValidtor are still @Inputs because there are not event handlers, there can't be\n *     multiple listeners and we need the Promise they must return.\n *\n * /!\\ You can notice that the SweetAlert2 `useRejections` and `expectRejections` are the only one to not have\n *     an @Input(). That's because they are deprecated and not using the default value of these parameters leads to\n *     clunky control flow. They are supported (use [options]=\"{}\"), but please don't use them.\n */\nexport declare class SwalComponent implements OnChanges, OnDestroy {\n    private readonly defaultSwalOptions;\n    title: SweetAlertOptions['title'];\n    titleText: SweetAlertOptions['titleText'];\n    text: SweetAlertOptions['text'];\n    html: SweetAlertOptions['html'];\n    footer: SweetAlertOptions['footer'];\n    type: SweetAlertOptions['type'];\n    backdrop: SweetAlertOptions['backdrop'];\n    toast: SweetAlertOptions['toast'];\n    target: SweetAlertOptions['target'];\n    input: SweetAlertOptions['input'];\n    width: SweetAlertOptions['width'];\n    padding: SweetAlertOptions['padding'];\n    background: SweetAlertOptions['background'];\n    position: SweetAlertOptions['position'];\n    grow: SweetAlertOptions['grow'];\n    customClass: SweetAlertOptions['customClass'];\n    timer: SweetAlertOptions['timer'];\n    animation: SweetAlertOptions['animation'];\n    allowOutsideClick: SweetAlertOptions['allowOutsideClick'];\n    allowEscapeKey: SweetAlertOptions['allowEscapeKey'];\n    allowEnterKey: SweetAlertOptions['allowEnterKey'];\n    showConfirmButton: SweetAlertOptions['showConfirmButton'];\n    showCancelButton: SweetAlertOptions['showCancelButton'];\n    confirmButtonText: SweetAlertOptions['confirmButtonText'];\n    cancelButtonText: SweetAlertOptions['cancelButtonText'];\n    confirmButtonColor: SweetAlertOptions['confirmButtonColor'];\n    cancelButtonColor: SweetAlertOptions['cancelButtonColor'];\n    confirmButtonClass: SweetAlertOptions['confirmButtonClass'];\n    cancelButtonClass: SweetAlertOptions['cancelButtonClass'];\n    confirmButtonAriaLabel: SweetAlertOptions['confirmButtonAriaLabel'];\n    cancelButtonAriaLabel: SweetAlertOptions['cancelButtonAriaLabel'];\n    buttonsStyling: SweetAlertOptions['buttonsStyling'];\n    reverseButtons: SweetAlertOptions['reverseButtons'];\n    focusConfirm: SweetAlertOptions['focusConfirm'];\n    focusCancel: SweetAlertOptions['focusCancel'];\n    showCloseButton: SweetAlertOptions['showCloseButton'];\n    closeButtonAriaLabel: SweetAlertOptions['closeButtonAriaLabel'];\n    showLoaderOnConfirm: SweetAlertOptions['showLoaderOnConfirm'];\n    preConfirm: SweetAlertOptions['preConfirm'];\n    imageUrl: SweetAlertOptions['imageUrl'];\n    imageWidth: SweetAlertOptions['imageWidth'];\n    imageHeight: SweetAlertOptions['imageHeight'];\n    imageAlt: SweetAlertOptions['imageAlt'];\n    imageClass: SweetAlertOptions['imageClass'];\n    inputPlaceholder: SweetAlertOptions['inputPlaceholder'];\n    inputValue: SweetAlertOptions['inputValue'];\n    inputOptions: SweetAlertOptions['inputOptions'];\n    inputAutoTrim: SweetAlertOptions['inputAutoTrim'];\n    inputAttributes: SweetAlertOptions['inputAttributes'];\n    inputValidator: SweetAlertOptions['inputValidator'];\n    inputClass: SweetAlertOptions['inputClass'];\n    progressSteps: SweetAlertOptions['progressSteps'];\n    currentProgressStep: SweetAlertOptions['currentProgressStep'];\n    progressStepsDistance: SweetAlertOptions['progressStepsDistance'];\n    /**\n     * Emits a BeforeOpenEvent when the modal DOM element has been created.\n     * Useful to perform DOM mutations before the modal is shown.\n     */\n    readonly beforeOpen: EventEmitter<events.BeforeOpenEvent>;\n    /**\n     * Emits an OpenEvent when the modal is shown.\n     */\n    readonly open: EventEmitter<events.OpenEvent>;\n    /**\n     * Emits a CloseEvent when modal get closed.\n     */\n    readonly close: EventEmitter<events.CloseEvent>;\n    /**\n     * Emits when the user clicks \"Confirm\".\n     * Bears a value when using \"input\", resolved \"preConfirm\", etc.\n     *\n     * Example:\n     *     public handleConfirm(email: string): void {\n     *         // ... save user email\n     *     }\n     */\n    readonly confirm: EventEmitter<any>;\n    /**\n     * Emits when the user clicks \"Cancel\" (or dismisses the modal by any other way).\n     * By default, it will emit a string representing the reason for which the SweetAlert has been closed, or the\n     * value of a rejected \"preConfirm\".\n     *\n     * Example:\n     *     public handleCancel(reason: string): void {\n     *         // reason can be 'cancel', 'overlay', 'close', and 'timer'\n     *         // ... do something\n     *     }\n     */\n    readonly cancel: EventEmitter<any>;\n    /**\n     * An object of SweetAlert2 native options, useful if:\n     *  - you don't want to use the @Inputs for practical/philosophical reasons ;\n     *  - there are missing @Inputs because ngx-sweetalert2 isn't up-to-date with SweetAlert2's latest changes.\n     *\n     * /!\\ Be aware that the options defined in this object will override the @Inputs of the same name.\n     */\n    options: SweetAlertOptions;\n    nativeSwal: typeof swal;\n    private isCurrentlyShown;\n    private readonly touchedProps;\n    private readonly markTouched;\n    constructor(defaultSwalOptions: SweetAlertOptions);\n    ngOnChanges(changes: SimpleChanges): void;\n    ngOnDestroy(): void;\n    /**\n     * Shows the SweetAlert.\n     *\n     * Returns the SweetAlert2 promise for convenience and use in code behind templates.\n     * Otherwise, (confirm)=\"myHandler($event)\" and (cancel)=\"myHandler($event)\" can be used in templates.\n     */\n    show(): Promise<any>;\n}\n"]}