{"version":3,"file":"toverux-ngx-sweetalert2.js","sources":["@toverux/ngx-sweetalert2/out/swal-partial-targets.ts","@toverux/ngx-sweetalert2/out/di.ts","@toverux/ngx-sweetalert2/out/swal.component.ts","@toverux/ngx-sweetalert2/out/swal.directive.ts","@toverux/ngx-sweetalert2/out/swal-partial.component.ts","@toverux/ngx-sweetalert2/out/swal-partial.directive.ts","@toverux/ngx-sweetalert2/out/sweetalert2.module.ts"],"names":[],"mappings":"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","sourcesContent":["import swal from 'sweetalert2';\n\n/**\n * Represents an object of targets for <swal> partials (use with *swalPartial directive).\n * We must use thunks to access the swal.* functions listed below, because they get created after the first modal is\n * shown, so this object lets us reference those functions safely and in a statically-typed manner.\n */\nexport class SwalPartialTargets {\n    public readonly title = () => swal.getTitle();\n\n    public readonly content = () => swal.getContent();\n\n    /**\n     * @deprecated Will be removed in the next major version, please use {@link SwalPartialTargets#actions} instead.\n     */\n    public readonly buttonsWrapper = () => swal.getButtonsWrapper();\n\n    public readonly actions = () => swal.getActions();\n\n    public readonly confirmButton = () => swal.getConfirmButton();\n\n    public readonly cancelButton = () => swal.getCancelButton();\n\n    public readonly footer = () => swal.getFooter();\n}\n","import { InjectionToken, Provider } from '@angular/core';\nimport { SweetAlertOptions } from 'sweetalert2';\n\nexport const SwalDefaults = new InjectionToken<SweetAlertOptions>('SwalDefaults');\n\nexport function swalDefaultsProvider(options: SweetAlertOptions = {}): Provider {\n    return {\n        provide: SwalDefaults,\n        useValue: options\n    };\n}\n","import {\n    ChangeDetectionStrategy, Component, EventEmitter, Inject, Input, OnChanges, OnDestroy, Output, SimpleChanges\n} from '@angular/core';\nimport swal, { SweetAlertOptions } from 'sweetalert2';\nimport { SwalDefaults } from './di';\nimport * as events from './swal-events';\n\n/**\n * <swal> component. See the README.md for usage.\n *\n * It contains a bunch of @Inputs that have a perfect 1:1 mapping with SweetAlert2 options.\n * Their types are directly coming from SweetAlert2 types defintitions, meaning that ngx-sweetalert2 is tightly coupled\n * to SweetAlert2, but also is type-safe.\n *\n * /!\\ Some SweetAlert options aren't @Inputs but @Outputs: onBeforeOpen, onOpen, and onClose (without \"on*\" prefix).\n *     However, preConfirm and inputValidtor are still @Inputs because there are not event handlers, there can't be\n *     multiple listeners and we need the Promise they must return.\n *\n * /!\\ You can notice that the SweetAlert2 `useRejections` and `expectRejections` are the only one to not have\n *     an @Input(). That's because they are deprecated and not using the default value of these parameters leads to\n *     clunky control flow. They are supported (use [options]=\"{}\"), but please don't use them.\n */\n@Component({\n    selector: 'swal',\n    template: '',\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class SwalComponent implements OnChanges, OnDestroy {\n    // If Swal gets more than a hundred props, I'll write a code generator, I promise.\n    // And I always resolve() my promises.\n    @Input() public title: SweetAlertOptions['title'];\n    @Input() public titleText: SweetAlertOptions['titleText'];\n    @Input() public text: SweetAlertOptions['text'];\n    @Input() public html: SweetAlertOptions['html'];\n    @Input() public footer: SweetAlertOptions['footer'];\n    @Input() public type: SweetAlertOptions['type'];\n    @Input() public backdrop: SweetAlertOptions['backdrop'];\n    @Input() public toast: SweetAlertOptions['toast'];\n    @Input() public target: SweetAlertOptions['target'];\n    @Input() public input: SweetAlertOptions['input'];\n    @Input() public width: SweetAlertOptions['width'];\n    @Input() public padding: SweetAlertOptions['padding'];\n    @Input() public background: SweetAlertOptions['background'];\n    @Input() public position: SweetAlertOptions['position'];\n    @Input() public grow: SweetAlertOptions['grow'];\n    @Input() public customClass: SweetAlertOptions['customClass'];\n    @Input() public timer: SweetAlertOptions['timer'];\n    @Input() public animation: SweetAlertOptions['animation'];\n    @Input() public allowOutsideClick: SweetAlertOptions['allowOutsideClick'];\n    @Input() public allowEscapeKey: SweetAlertOptions['allowEscapeKey'];\n    @Input() public allowEnterKey: SweetAlertOptions['allowEnterKey'];\n    @Input() public showConfirmButton: SweetAlertOptions['showConfirmButton'];\n    @Input() public showCancelButton: SweetAlertOptions['showCancelButton'];\n    @Input() public confirmButtonText: SweetAlertOptions['confirmButtonText'];\n    @Input() public cancelButtonText: SweetAlertOptions['cancelButtonText'];\n    @Input() public confirmButtonColor: SweetAlertOptions['confirmButtonColor'];\n    @Input() public cancelButtonColor: SweetAlertOptions['cancelButtonColor'];\n    @Input() public confirmButtonClass: SweetAlertOptions['confirmButtonClass'];\n    @Input() public cancelButtonClass: SweetAlertOptions['cancelButtonClass'];\n    @Input() public confirmButtonAriaLabel: SweetAlertOptions['confirmButtonAriaLabel'];\n    @Input() public cancelButtonAriaLabel: SweetAlertOptions['cancelButtonAriaLabel'];\n    @Input() public buttonsStyling: SweetAlertOptions['buttonsStyling'];\n    @Input() public reverseButtons: SweetAlertOptions['reverseButtons'];\n    @Input() public focusConfirm: SweetAlertOptions['focusConfirm'];\n    @Input() public focusCancel: SweetAlertOptions['focusCancel'];\n    @Input() public showCloseButton: SweetAlertOptions['showCloseButton'];\n    @Input() public closeButtonAriaLabel: SweetAlertOptions['closeButtonAriaLabel'];\n    @Input() public showLoaderOnConfirm: SweetAlertOptions['showLoaderOnConfirm'];\n    @Input() public preConfirm: SweetAlertOptions['preConfirm'];\n    @Input() public imageUrl: SweetAlertOptions['imageUrl'];\n    @Input() public imageWidth: SweetAlertOptions['imageWidth'];\n    @Input() public imageHeight: SweetAlertOptions['imageHeight'];\n    @Input() public imageAlt: SweetAlertOptions['imageAlt'];\n    @Input() public imageClass: SweetAlertOptions['imageClass'];\n    @Input() public inputPlaceholder: SweetAlertOptions['inputPlaceholder'];\n    @Input() public inputValue: SweetAlertOptions['inputValue'];\n    @Input() public inputOptions: SweetAlertOptions['inputOptions'];\n    @Input() public inputAutoTrim: SweetAlertOptions['inputAutoTrim'];\n    @Input() public inputAttributes: SweetAlertOptions['inputAttributes'];\n    @Input() public inputValidator: SweetAlertOptions['inputValidator'];\n    @Input() public inputClass: SweetAlertOptions['inputClass'];\n    @Input() public progressSteps: SweetAlertOptions['progressSteps'];\n    @Input() public currentProgressStep: SweetAlertOptions['currentProgressStep'];\n    @Input() public progressStepsDistance: SweetAlertOptions['progressStepsDistance'];\n\n    /**\n     * Emits a BeforeOpenEvent when the modal DOM element has been created.\n     * Useful to perform DOM mutations before the modal is shown.\n     */\n    @Output() public readonly beforeOpen = new EventEmitter<events.BeforeOpenEvent>();\n\n    /**\n     * Emits an OpenEvent when the modal is shown.\n     */\n    @Output() public readonly open = new EventEmitter<events.OpenEvent>();\n\n    /**\n     * Emits a CloseEvent when modal get closed.\n     */\n    @Output() public readonly close = new EventEmitter<events.CloseEvent>();\n\n    /**\n     * Emits when the user clicks \"Confirm\".\n     * Bears a value when using \"input\", resolved \"preConfirm\", etc.\n     *\n     * Example:\n     *     public handleConfirm(email: string): void {\n     *         // ... save user email\n     *     }\n     */\n    @Output() public readonly confirm = new EventEmitter<any>();\n\n    /**\n     * Emits when the user clicks \"Cancel\" (or dismisses the modal by any other way).\n     * By default, it will emit a string representing the reason for which the SweetAlert has been closed, or the\n     * value of a rejected \"preConfirm\".\n     *\n     * Example:\n     *     public handleCancel(reason: string): void {\n     *         // reason can be 'cancel', 'overlay', 'close', and 'timer'\n     *         // ... do something\n     *     }\n     */\n    @Output() public readonly cancel = new EventEmitter<any>();\n\n    /**\n     * An object of SweetAlert2 native options, useful if:\n     *  - you don't want to use the @Inputs for practical/philosophical reasons ;\n     *  - there are missing @Inputs because ngx-sweetalert2 isn't up-to-date with SweetAlert2's latest changes.\n     *\n     * /!\\ Be aware that the options defined in this object will override the @Inputs of the same name.\n     */\n    @Input() public set options(options: SweetAlertOptions) {\n        Object.assign(this, options);\n        Object.keys(options).forEach(this.markTouched);\n    }\n\n    public get options(): SweetAlertOptions {\n        const options: SweetAlertOptions = {};\n\n        //=> We will compute the options object based on the option keys that are known to have changed.\n        // That avoids passing a gigantic object to SweetAlert2, making debugging easier and potentially avoiding\n        // side effects.\n        this.touchedProps.forEach(prop => {\n            options[prop] = (this as { [prop: string]: any })[prop];\n        });\n\n        return options;\n    }\n\n    public nativeSwal = swal;\n\n    private isCurrentlyShown = false;\n\n    private readonly touchedProps = new Set<keyof SweetAlertOptions>();\n\n    private readonly markTouched = this.touchedProps.add.bind(this.touchedProps);\n\n    public constructor(@Inject(SwalDefaults) private readonly defaultSwalOptions: SweetAlertOptions) {\n        //=> Force `this` scope of show() on this component\n        //   Useful for doing things like (click)=\"mySwal.show()\".\n        this.show = this.show.bind(this);\n    }\n\n    public ngOnChanges(changes: SimpleChanges): void {\n        Object.keys(changes)\n            .filter(prop => prop !== 'options')\n            .forEach(this.markTouched);\n    }\n\n    public ngOnDestroy(): void {\n        if (this.isCurrentlyShown) {\n            swal.close();\n        }\n    }\n\n    /**\n     * Shows the SweetAlert.\n     *\n     * Returns the SweetAlert2 promise for convenience and use in code behind templates.\n     * Otherwise, (confirm)=\"myHandler($event)\" and (cancel)=\"myHandler($event)\" can be used in templates.\n     */\n    public show(): Promise<any> {\n        //=> Build the SweetAlert2 options\n        const options: SweetAlertOptions = {\n            //=> Merge with the default module-level options\n            ...this.defaultSwalOptions,\n\n            //=> Merge with calculated options set for that specific swal\n            ...this.options,\n\n            //=> Handle modal lifecycle events\n            onBeforeOpen: (modalElement) => {\n                this.beforeOpen.emit({ modalElement });\n            },\n\n            onOpen: (modalElement) => {\n                this.isCurrentlyShown = true;\n                this.open.emit({ modalElement });\n            },\n\n            onClose: (modalElement) => {\n                this.isCurrentlyShown = false;\n                this.close.emit({ modalElement });\n            }\n        };\n\n        //=> Show the Swal!\n        const promise = swal(options);\n\n        //=> Handle (confirm) and (cancel) @Outputs\n        // tslint:disable-next-line:no-string-literal\n        const useRejections = (options as { useRejections?: boolean }).useRejections;\n\n        promise.then(\n            result => {\n                if (useRejections) {\n                    this.confirm.emit(result);\n                } else if ('value' in result) {\n                    this.confirm.emit(result.value);\n                } else {\n                    this.cancel.emit(result.dismiss);\n                }\n            },\n            err => {\n                if (useRejections) {\n                    this.cancel.emit(err);\n                }\n            }\n        );\n\n        //=> Return the unaltered promise\n        return promise;\n    }\n}\n","import {\n    ComponentFactoryResolver, ComponentRef, Directive, EventEmitter, HostListener, Input, OnDestroy, OnInit, Output,\n    ViewContainerRef\n} from '@angular/core';\nimport swal, { SweetAlertOptions, SweetAlertArrayOptions } from 'sweetalert2';\nimport { SwalComponent } from './swal.component';\n\n/**\n * [swal] directive. It takes a value that defines the Sweet Alert and can be of three types:\n *\n * 1) A simple array of two or three strings defining [title, text, type] - the type being optional, ex:\n *\n *    <button [swal]=\"['Title', 'Text']\">Click me</button>\n *\n * 2) A native SweetAlert2 options object, ex:\n *\n *    <button [swal]=\"{ title: 'Title', text: 'Text' }\">Click me</button>\n *\n * 3) A reference to an existing SwalComponent instance for more advanced uses, ex:\n *\n *    <button [swal]=\"mySwal\">Click me</button>\n *    <swal #mySwal title=\"Title\" text=\"Text\"></swal>\n */\n@Directive({\n    selector: '[swal]'\n})\nexport class SwalDirective implements OnInit, OnDestroy {\n    /**\n     * SweetAlert2 options or a SwalComponent instance.\n     * See the class doc block for more informations.\n     */\n    @Input() public set swal(options: SwalComponent | SweetAlertOptions | SweetAlertArrayOptions) {\n        if (options instanceof SwalComponent) {\n            this.swalInstance = options;\n        } else if (Array.isArray(options)) {\n            this.swalOptions = swal.argsToParams(options);\n        } else {\n            this.swalOptions = options;\n        }\n    }\n\n    /**\n     * Emits when the user clicks \"Confirm\".\n     * Bears a value when using \"input\", resolved \"preConfirm\", etc.\n     *\n     * Example:\n     *     public handleConfirm(email: string): void {\n     *         // ... save user email\n     *     }\n     */\n    @Output() public readonly confirm = new EventEmitter<any>();\n\n    /**\n     * Emits when the user clicks \"Cancel\" (or dismisses the modal by any other way).\n     * By default, it will emit a string representing the reason for which the SweetAlert has been closed, or the\n     * value of a rejected \"preConfirm\".\n     *\n     * Example:\n     *     public handleCancel(reason: string): void {\n     *         // reason can be 'cancel', 'overlay', 'close', and 'timer'\n     *         // ... do something\n     *     }\n     */\n    @Output() public readonly cancel = new EventEmitter<any>();\n\n    /**\n     * When the user does not provides a SwalComponent instance, we create it on-the-fly and assign the plain-object\n     * options to it.\n     * This fields keeps a reference to the dynamically-created <swal>, to destroy it along this directive instance.\n     */\n    private swalRef: ComponentRef<SwalComponent>;\n\n    /**\n     * An instance of the <swal> component that this directive controls.\n     * Could be an instance passed by the user, otherwise it's the instance we've dynamically created.\n     */\n    private swalInstance: SwalComponent;\n\n    /**\n     * Holds the native SweetAlert2 options.\n     * Empty when the user passed an existing SwalComponent instance.\n     */\n    private swalOptions: SweetAlertOptions;\n\n    public constructor(\n        private readonly viewContainerRef: ViewContainerRef,\n        private readonly resolver: ComponentFactoryResolver) {\n    }\n\n    /**\n     * OnInit lifecycle handler.\n     * Creates a SwalComponent instance if the user didn't provided one and binds on that component (confirm) and\n     * (cancel) outputs to reemit on the directive.\n     */\n    public ngOnInit(): void {\n        if (!this.swalInstance) {\n            const factory = this.resolver.resolveComponentFactory(SwalComponent);\n\n            this.swalRef = this.viewContainerRef.createComponent(factory);\n            this.swalInstance = this.swalRef.instance;\n        }\n    }\n\n    /**\n     * OnDestroy lifecycle handler.\n     * Destroys the dynamically-created SwalComponent and unsubscribes from that component's (confirm) and (cancel).\n     */\n    public ngOnDestroy(): void {\n        if (this.swalRef) {\n            this.swalRef.destroy();\n        }\n    }\n\n    /**\n     * Click handler.\n     * The directive listens for onclick events on its host element.\n     * When this happens, it shows the <swal> attached to this directive.\n     */\n    @HostListener('click', ['$event'])\n    public onHostClicked(event: MouseEvent): void {\n        event.preventDefault();\n        event.stopImmediatePropagation();\n        event.stopPropagation();\n\n        if (this.swalOptions) {\n            this.swalInstance.options = this.swalOptions;\n        }\n\n        const confirmSub = this.swalInstance.confirm.asObservable().subscribe(v => this.confirm.emit(v));\n        const cancelSub = this.swalInstance.cancel.asObservable().subscribe(v => this.cancel.emit(v));\n\n        this.swalInstance.show().then(unsubscribe);\n\n        function unsubscribe() {\n            confirmSub.unsubscribe();\n            cancelSub.unsubscribe();\n        }\n    }\n}\n","import { ChangeDetectionStrategy, Component, Input, TemplateRef } from '@angular/core';\n\n/**\n * @internal\n * Holds a consumer's Angular template and displays it on a Sweet Alert.\n * See SwalPartialDirective for info about the covered feature.\n */\n@Component({\n    template: '<ng-container *ngTemplateOutlet=\"template\"></ng-container>',\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class SwalPartialComponent {\n    @Input() public template: TemplateRef<any>;\n}\n","import {\n    ApplicationRef, ComponentFactoryResolver, ComponentRef, Directive, Host, Injector, Input, OnDestroy, OnInit,\n    TemplateRef\n} from '@angular/core';\nimport { Subscription } from 'rxjs/Subscription';\nimport { SwalPartialTargets } from './swal-partial-targets';\nimport { SwalPartialComponent } from './swal-partial.component';\nimport { SwalComponent } from './swal.component';\n\n/**\n * A structural directive that lets you use Angular templates inside of Sweet Alerts.\n * There are different targetable zones in a Sweet Alert: title, content, confirmButton, cancelButton, buttonsWrapper.\n * The default target is the content zone.\n *\n * Usage in your component's TypeScript code-behind (if you use another target than \"content\"):\n *\n *     @Component({ ... })\n *     export class MyComponent {\n *         public constructor(public readonly swalTargets: SwalPartialTargets) {\n *         }\n *     }\n *\n * Usage in the template:\n *\n *     <swal title=\"Fill the form\" (confirm)=\"confirmHandler()\">\n *         <!-- This form will be displayed as the alert main content\n *              Targets the alert's main content zone by default -->\n *         <form *swalPartial [formControl]=\"myForm\">\n *             ...\n *         </form>\n *\n *         <!-- This targets the confirm button's inner content\n *              Notice the usage of ng-container to avoid creating an useless DOM element inside the button -->\n *         <ng-container *swalPartial=\"swalTargets.confirmButton\">\n *              Send ({{ secondsLeft }} seconds left)\n *         </ng-container>\n *     <swal>\n */\n@Directive({\n    selector: '[swalPartial]'\n})\nexport class SwalPartialDirective implements OnInit, OnDestroy {\n    /**\n     * Takes a \"partial target\" or nothing (will target main content zone by default).\n     *\n     * See the {@link SwalPartialTargets} service to see the available targets.\n     * See the class doc block for more informations.\n     */\n    @Input() public swalPartial: () => HTMLElement;\n\n    /**\n     * Holds the component reference of the controlled SwalPartialComponent to destroy it when no longer needed.\n     */\n    private partialRef: ComponentRef<SwalPartialComponent>;\n\n    private beforeOpenSubscription: Subscription;\n    private closeSubscription: Subscription;\n\n    constructor(\n        private readonly resolver: ComponentFactoryResolver,\n        private readonly injector: Injector,\n        private readonly app: ApplicationRef,\n        private readonly templateRef: TemplateRef<any>,\n        private readonly swalTargets: SwalPartialTargets,\n        @Host() private readonly swalComponent: SwalComponent) {\n    }\n\n    /**\n     * Subscribes to the the Sweet Alert appearance/disappearance to create/destroy the SwalPartialComponent that will\n     * receive the consumer's template.\n     */\n    public ngOnInit(): void {\n        this.beforeOpenSubscription = this.swalComponent.beforeOpen.asObservable().subscribe(() => {\n            //=> Create the SwalPartialComponent on the target DOM node in the Sweet Alert\n            const targetEl = this.swalPartial ? this.swalPartial() : this.swalTargets.content();\n            const factory = this.resolver.resolveComponentFactory(SwalPartialComponent);\n\n            this.partialRef = factory.create(this.injector, [], targetEl);\n\n            //=> Apply the consumer's template on the component\n            this.partialRef.instance.template = this.templateRef;\n\n            //=> Make the Angular app aware of that detached view so change detection works\n            this.app.attachView(this.partialRef.hostView);\n        });\n\n        this.closeSubscription = this.swalComponent.close.asObservable().subscribe(() => {\n            //=> Detach the partial component from the app and destroy it\n            this.app.detachView(this.partialRef.hostView);\n            this.partialRef.destroy();\n        });\n    }\n\n    /**\n     * Unsubscribes from the Sweet Alert appearance/disappearance.\n     */\n    public ngOnDestroy(): void {\n        this.beforeOpenSubscription.unsubscribe();\n        this.closeSubscription.unsubscribe();\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { ModuleWithProviders, NgModule } from '@angular/core';\nimport { SweetAlertOptions } from 'sweetalert2';\nimport { swalDefaultsProvider } from './di';\nimport { SwalPartialTargets } from './swal-partial-targets';\nimport { SwalPartialComponent } from './swal-partial.component';\nimport { SwalPartialDirective } from './swal-partial.directive';\nimport { SwalComponent } from './swal.component';\nimport { SwalDirective } from './swal.directive';\n\n@NgModule({\n    declarations: [\n        SwalComponent, SwalPartialDirective, SwalPartialComponent,\n        SwalDirective\n    ],\n    providers: [\n        SwalPartialTargets\n    ],\n    imports: [\n        CommonModule\n    ],\n    exports: [\n        SwalComponent, SwalPartialDirective,\n        SwalDirective\n    ],\n    entryComponents: [\n        SwalComponent, SwalPartialComponent\n    ]\n})\nexport class SweetAlert2Module {\n    public static forRoot(defaultSwalOptions?: SweetAlertOptions): ModuleWithProviders {\n        return {\n            ngModule: SweetAlert2Module,\n            providers: [swalDefaultsProvider(defaultSwalOptions)]\n        };\n    }\n}\n"]}