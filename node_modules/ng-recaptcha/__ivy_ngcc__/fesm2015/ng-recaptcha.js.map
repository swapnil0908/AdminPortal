{"version":3,"file":"ng-recaptcha.js","sources":["../../../projects/ng-recaptcha/src/lib/load-script.ts","../../../projects/ng-recaptcha/src/lib/tokens.ts","../../../projects/ng-recaptcha/src/lib/recaptcha-loader.service.ts","../../../projects/ng-recaptcha/src/lib/recaptcha.component.ts","../../../projects/ng-recaptcha/src/lib/recaptcha-common.module.ts","../../../projects/ng-recaptcha/src/lib/recaptcha.module.ts","../../../projects/ng-recaptcha/src/lib/recaptcha-v3.service.ts","../../../projects/ng-recaptcha/src/lib/recaptcha-v3.module.ts","../../../projects/ng-recaptcha/src/lib/recaptcha-value-accessor.directive.ts","../../../projects/ng-recaptcha/src/lib/recaptcha-forms.module.ts","../../../projects/ng-recaptcha/src/ng-recaptcha.ts"],"names":[],"mappings":"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","sourcesContent":["declare global {\n  interface Window {\n    ng2recaptchaloaded: () => void;\n  }\n}\n\nfunction loadScript(\n  renderMode: \"explicit\" | string,\n  onLoaded: (grecaptcha: ReCaptchaV2.ReCaptcha) => void,\n  urlParams: string,\n  url?: string,\n  nonce?: string\n): void {\n  window.ng2recaptchaloaded = () => {\n    onLoaded(grecaptcha);\n  };\n  const script = document.createElement(\"script\");\n  script.innerHTML = \"\";\n  const baseUrl = url || \"https://www.google.com/recaptcha/api.js\";\n\n  script.src = `${baseUrl}?render=${renderMode}&onload=ng2recaptchaloaded${urlParams}`;\n  if (nonce) {\n    script.nonce = nonce;\n  }\n  script.async = true;\n  script.defer = true;\n  document.head.appendChild(script);\n}\n\nexport const loader = { loadScript };\n","import { InjectionToken } from \"@angular/core\";\n\nimport { RecaptchaSettings } from \"./recaptcha-settings\";\n\nexport const RECAPTCHA_LANGUAGE = new InjectionToken<string>(\n  \"recaptcha-language\"\n);\nexport const RECAPTCHA_BASE_URL = new InjectionToken<string>(\n  \"recaptcha-base-url\"\n);\nexport const RECAPTCHA_NONCE = new InjectionToken<string>(\n  \"recaptcha-nonce-tag\"\n);\nexport const RECAPTCHA_SETTINGS = new InjectionToken<RecaptchaSettings>(\n  \"recaptcha-settings\"\n);\nexport const RECAPTCHA_V3_SITE_KEY = new InjectionToken<string>(\n  \"recaptcha-v3-site-key\"\n);\n","import { isPlatformBrowser } from \"@angular/common\";\nimport { Inject, Injectable, Optional, PLATFORM_ID } from \"@angular/core\";\nimport { BehaviorSubject, Observable, of } from \"rxjs\";\n\nimport { loader } from \"./load-script\";\nimport {\n  RECAPTCHA_BASE_URL,\n  RECAPTCHA_LANGUAGE,\n  RECAPTCHA_NONCE,\n  RECAPTCHA_V3_SITE_KEY,\n} from \"./tokens\";\n\n@Injectable()\nexport class RecaptchaLoaderService {\n  /**\n   * @internal\n   * @nocollapse\n   */\n  private static ready: BehaviorSubject<ReCaptchaV2.ReCaptcha> = null;\n\n  public ready: Observable<ReCaptchaV2.ReCaptcha>;\n\n  /** @internal */\n  private language: string;\n  /** @internal */\n  private baseUrl: string;\n  /** @internal */\n  private nonce: string;\n  /** @internal */\n  private v3SiteKey: string;\n\n  constructor(\n    // eslint-disable-next-line @typescript-eslint/ban-types\n    @Inject(PLATFORM_ID) private readonly platformId: Object,\n    @Optional() @Inject(RECAPTCHA_LANGUAGE) language?: string,\n    @Optional() @Inject(RECAPTCHA_BASE_URL) baseUrl?: string,\n    @Optional() @Inject(RECAPTCHA_NONCE) nonce?: string,\n    @Optional() @Inject(RECAPTCHA_V3_SITE_KEY) v3SiteKey?: string\n  ) {\n    this.language = language;\n    this.baseUrl = baseUrl;\n    this.nonce = nonce;\n    this.v3SiteKey = v3SiteKey;\n    this.init();\n    this.ready = isPlatformBrowser(this.platformId)\n      ? RecaptchaLoaderService.ready.asObservable()\n      : of();\n  }\n\n  /** @internal */\n  private init() {\n    if (RecaptchaLoaderService.ready) {\n      return;\n    }\n    if (isPlatformBrowser(this.platformId)) {\n      const subject = new BehaviorSubject<ReCaptchaV2.ReCaptcha>(null);\n      RecaptchaLoaderService.ready = subject;\n      const langParam = this.language ? \"&hl=\" + this.language : \"\";\n\n      const renderMode = this.v3SiteKey || \"explicit\";\n      loader.loadScript(\n        renderMode,\n        (grecaptcha) => subject.next(grecaptcha),\n        langParam,\n        this.baseUrl,\n        this.nonce\n      );\n    }\n  }\n}\n","import {\n  AfterViewInit,\n  Component,\n  ElementRef,\n  EventEmitter,\n  HostBinding,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n} from \"@angular/core\";\nimport { Subscription } from \"rxjs\";\n\nimport { RecaptchaLoaderService } from \"./recaptcha-loader.service\";\nimport { RecaptchaSettings } from \"./recaptcha-settings\";\nimport { RECAPTCHA_SETTINGS } from \"./tokens\";\n\nlet nextId = 0;\n\nexport type NeverUndefined<T> = T extends undefined ? never : T;\n\nexport type RecaptchaErrorParameters = Parameters<\n  NeverUndefined<ReCaptchaV2.Parameters[\"error-callback\"]>\n>;\n\n@Component({\n  exportAs: \"reCaptcha\",\n  selector: \"re-captcha\",\n  template: ``,\n})\nexport class RecaptchaComponent implements AfterViewInit, OnDestroy {\n  @Input()\n  @HostBinding(\"attr.id\")\n  public id = `ngrecaptcha-${nextId++}`;\n\n  @Input() public siteKey: string;\n  @Input() public theme: ReCaptchaV2.Theme;\n  @Input() public type: ReCaptchaV2.Type;\n  @Input() public size: ReCaptchaV2.Size;\n  @Input() public tabIndex: number;\n  @Input() public badge: ReCaptchaV2.Badge;\n  @Input() public errorMode: \"handled\" | \"default\" = \"default\";\n\n  @Output() public resolved = new EventEmitter<string>();\n  // The rename will happen a bit later\n  // eslint-disable-next-line @angular-eslint/no-output-native\n  @Output() public error = new EventEmitter<RecaptchaErrorParameters>();\n\n  /** @internal */\n  private subscription: Subscription;\n  /** @internal */\n  private widget: number;\n  /** @internal */\n  private grecaptcha: ReCaptchaV2.ReCaptcha;\n  /** @internal */\n  private executeRequested: boolean;\n\n  constructor(\n    private elementRef: ElementRef,\n    private loader: RecaptchaLoaderService,\n    private zone: NgZone,\n    @Optional() @Inject(RECAPTCHA_SETTINGS) settings?: RecaptchaSettings\n  ) {\n    if (settings) {\n      this.siteKey = settings.siteKey;\n      this.theme = settings.theme;\n      this.type = settings.type;\n      this.size = settings.size;\n      this.badge = settings.badge;\n    }\n  }\n\n  public ngAfterViewInit(): void {\n    this.subscription = this.loader.ready.subscribe(\n      (grecaptcha: ReCaptchaV2.ReCaptcha) => {\n        if (grecaptcha != null && grecaptcha.render instanceof Function) {\n          this.grecaptcha = grecaptcha;\n          this.renderRecaptcha();\n        }\n      }\n    );\n  }\n\n  public ngOnDestroy(): void {\n    // reset the captcha to ensure it does not leave anything behind\n    // after the component is no longer needed\n    this.grecaptchaReset();\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n\n  /**\n   * Executes the invisible recaptcha.\n   * Does nothing if component's size is not set to \"invisible\".\n   */\n  public execute(): void {\n    if (this.size !== \"invisible\") {\n      return;\n    }\n\n    if (this.widget != null) {\n      this.grecaptcha.execute(this.widget);\n    } else {\n      // delay execution of recaptcha until it actually renders\n      this.executeRequested = true;\n    }\n  }\n\n  public reset(): void {\n    if (this.widget != null) {\n      if (this.grecaptcha.getResponse(this.widget)) {\n        // Only emit an event in case if something would actually change.\n        // That way we do not trigger \"touching\" of the control if someone does a \"reset\"\n        // on a non-resolved captcha.\n        this.resolved.emit(null);\n      }\n\n      this.grecaptchaReset();\n    }\n  }\n\n  /** @internal */\n  private expired() {\n    this.resolved.emit(null);\n  }\n\n  /** @internal */\n  private errored(args: RecaptchaErrorParameters) {\n    this.error.emit(args);\n  }\n\n  /** @internal */\n  private captchaResponseCallback(response: string) {\n    this.resolved.emit(response);\n  }\n\n  /** @internal */\n  private grecaptchaReset() {\n    if (this.widget != null) {\n      this.zone.runOutsideAngular(() => this.grecaptcha.reset(this.widget));\n    }\n  }\n\n  /** @internal */\n  private renderRecaptcha() {\n    // This `any` can be removed after @types/grecaptcha get updated\n    const renderOptions: ReCaptchaV2.Parameters = {\n      badge: this.badge,\n      callback: (response: string) => {\n        this.zone.run(() => this.captchaResponseCallback(response));\n      },\n      \"expired-callback\": () => {\n        this.zone.run(() => this.expired());\n      },\n      sitekey: this.siteKey,\n      size: this.size,\n      tabindex: this.tabIndex,\n      theme: this.theme,\n      type: this.type,\n    };\n\n    if (this.errorMode === \"handled\") {\n      renderOptions[\"error-callback\"] = (...args: RecaptchaErrorParameters) => {\n        this.zone.run(() => this.errored(args));\n      };\n    }\n\n    this.widget = this.grecaptcha.render(\n      this.elementRef.nativeElement,\n      renderOptions\n    );\n\n    if (this.executeRequested === true) {\n      this.executeRequested = false;\n      this.execute();\n    }\n  }\n}\n","import { NgModule } from \"@angular/core\";\n\nimport { RecaptchaComponent } from \"./recaptcha.component\";\n\n@NgModule({\n  declarations: [RecaptchaComponent],\n  exports: [RecaptchaComponent],\n})\nexport class RecaptchaCommonModule {}\n","import { NgModule } from \"@angular/core\";\n\nimport { RecaptchaCommonModule } from \"./recaptcha-common.module\";\nimport { RecaptchaLoaderService } from \"./recaptcha-loader.service\";\nimport { RecaptchaComponent } from \"./recaptcha.component\";\n\n@NgModule({\n  exports: [RecaptchaComponent],\n  imports: [RecaptchaCommonModule],\n  providers: [RecaptchaLoaderService],\n})\nexport class RecaptchaModule {}\n","import { isPlatformBrowser } from \"@angular/common\";\nimport {\n  Inject,\n  Injectable,\n  NgZone,\n  Optional,\n  PLATFORM_ID,\n} from \"@angular/core\";\nimport { Observable, Subject } from \"rxjs\";\n\nimport { loader } from \"./load-script\";\nimport {\n  RECAPTCHA_BASE_URL,\n  RECAPTCHA_LANGUAGE,\n  RECAPTCHA_NONCE,\n  RECAPTCHA_V3_SITE_KEY,\n} from \"./tokens\";\n\nexport interface OnExecuteData {\n  /**\n   * The name of the action that has been executed.\n   */\n  action: string;\n  /**\n   * The token that reCAPTCHA v3 provided when executing the action.\n   */\n  token: string;\n}\n\nexport interface OnExecuteErrorData {\n  /**\n   * The name of the action that has been executed.\n   */\n  action: string;\n  /**\n   * The error which was encountered\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  error: any;\n}\n\ntype ActionBacklogEntry = [string, Subject<string>];\n\n/**\n * The main service for working with reCAPTCHA v3 APIs.\n *\n * Use the `execute` method for executing a single action, and\n * `onExecute` observable for listening to all actions at once.\n */\n@Injectable()\nexport class ReCaptchaV3Service {\n  /** @internal */\n  private readonly isBrowser: boolean;\n  /** @internal */\n  private readonly siteKey: string;\n  /** @internal */\n  private readonly zone: NgZone;\n  /** @internal */\n  private actionBacklog: ActionBacklogEntry[] | undefined;\n  /** @internal */\n  private nonce: string;\n  /** @internal */\n  private language?: string;\n  /** @internal */\n  private baseUrl: string;\n  /** @internal */\n  private grecaptcha: ReCaptchaV2.ReCaptcha;\n\n  /** @internal */\n  private onExecuteSubject: Subject<OnExecuteData>;\n  /** @internal */\n  private onExecuteErrorSubject: Subject<OnExecuteErrorData>;\n  /** @internal */\n  private onExecuteObservable: Observable<OnExecuteData>;\n  /** @internal */\n  private onExecuteErrorObservable: Observable<OnExecuteErrorData>;\n\n  constructor(\n    zone: NgZone,\n    @Inject(RECAPTCHA_V3_SITE_KEY) siteKey: string,\n    // eslint-disable-next-line @typescript-eslint/ban-types\n    @Inject(PLATFORM_ID) platformId: Object,\n    @Optional() @Inject(RECAPTCHA_BASE_URL) baseUrl?: string,\n    @Optional() @Inject(RECAPTCHA_NONCE) nonce?: string,\n    @Optional() @Inject(RECAPTCHA_LANGUAGE) language?: string\n  ) {\n    this.zone = zone;\n    this.isBrowser = isPlatformBrowser(platformId);\n    this.siteKey = siteKey;\n    this.nonce = nonce;\n    this.language = language;\n    this.baseUrl = baseUrl;\n\n    this.init();\n  }\n\n  public get onExecute(): Observable<OnExecuteData> {\n    if (!this.onExecuteSubject) {\n      this.onExecuteSubject = new Subject<OnExecuteData>();\n      this.onExecuteObservable = this.onExecuteSubject.asObservable();\n    }\n\n    return this.onExecuteObservable;\n  }\n\n  public get onExecuteError(): Observable<OnExecuteErrorData> {\n    if (!this.onExecuteErrorSubject) {\n      this.onExecuteErrorSubject = new Subject<OnExecuteErrorData>();\n      this.onExecuteErrorObservable = this.onExecuteErrorSubject.asObservable();\n    }\n\n    return this.onExecuteErrorObservable;\n  }\n\n  /**\n   * Executes the provided `action` with reCAPTCHA v3 API.\n   * Use the emitted token value for verification purposes on the backend.\n   *\n   * For more information about reCAPTCHA v3 actions and tokens refer to the official documentation at\n   * https://developers.google.com/recaptcha/docs/v3.\n   *\n   * @param {string} action the action to execute\n   * @returns {Observable<string>} an `Observable` that will emit the reCAPTCHA v3 string `token` value whenever ready.\n   * The returned `Observable` completes immediately after emitting a value.\n   */\n  public execute(action: string): Observable<string> {\n    const subject = new Subject<string>();\n    if (this.isBrowser) {\n      if (!this.grecaptcha) {\n        // todo: add to array of later executions\n        if (!this.actionBacklog) {\n          this.actionBacklog = [];\n        }\n\n        this.actionBacklog.push([action, subject]);\n      } else {\n        this.executeActionWithSubject(action, subject);\n      }\n    }\n\n    return subject.asObservable();\n  }\n\n  /** @internal */\n  private executeActionWithSubject(\n    action: string,\n    subject: Subject<string>\n  ): void {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const onError = (error: any) => {\n      this.zone.run(() => {\n        subject.error(error);\n        if (this.onExecuteErrorSubject) {\n          // We don't know any better at this point, unfortunately, so have to resort to `any`\n          // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n          this.onExecuteErrorSubject.next({ action, error });\n        }\n      });\n    };\n\n    this.zone.runOutsideAngular(() => {\n      try {\n        this.grecaptcha\n          .execute(this.siteKey, { action })\n          .then((token: string) => {\n            this.zone.run(() => {\n              subject.next(token);\n              subject.complete();\n              if (this.onExecuteSubject) {\n                this.onExecuteSubject.next({ action, token });\n              }\n            });\n          }, onError);\n      } catch (e) {\n        onError(e);\n      }\n    });\n  }\n\n  /** @internal */\n  private init() {\n    if (this.isBrowser) {\n      if (\"grecaptcha\" in window) {\n        this.grecaptcha = grecaptcha;\n      } else {\n        const langParam = this.language ? \"&hl=\" + this.language : \"\";\n        loader.loadScript(\n          this.siteKey,\n          this.onLoadComplete,\n          langParam,\n          this.baseUrl,\n          this.nonce\n        );\n      }\n    }\n  }\n\n  /** @internal */\n  private onLoadComplete = (grecaptcha: ReCaptchaV2.ReCaptcha) => {\n    this.grecaptcha = grecaptcha;\n    if (this.actionBacklog && this.actionBacklog.length > 0) {\n      this.actionBacklog.forEach(([action, subject]) =>\n        this.executeActionWithSubject(action, subject)\n      );\n      this.actionBacklog = undefined;\n    }\n  };\n}\n","import { NgModule } from \"@angular/core\";\n\nimport { ReCaptchaV3Service } from \"./recaptcha-v3.service\";\n\n@NgModule({\n  providers: [ReCaptchaV3Service],\n})\nexport class RecaptchaV3Module {}\n","import { Directive, forwardRef, HostListener } from \"@angular/core\";\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from \"@angular/forms\";\n\nimport { RecaptchaComponent } from \"./recaptcha.component\";\n\n@Directive({\n  providers: [\n    {\n      multi: true,\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => RecaptchaValueAccessorDirective),\n    },\n  ],\n  selector:\n    \"re-captcha[formControlName],re-captcha[formControl],re-captcha[ngModel]\",\n})\nexport class RecaptchaValueAccessorDirective implements ControlValueAccessor {\n  /** @internal */\n  private onChange: (value: string) => void;\n\n  /** @internal */\n  private onTouched: () => void;\n\n  constructor(private host: RecaptchaComponent) {}\n\n  public writeValue(value: string): void {\n    if (!value) {\n      this.host.reset();\n    }\n  }\n\n  public registerOnChange(fn: (value: string) => void): void {\n    this.onChange = fn;\n  }\n  public registerOnTouched(fn: () => void): void {\n    this.onTouched = fn;\n  }\n\n  @HostListener(\"resolved\", [\"$event\"]) public onResolve($event: string): void {\n    if (this.onChange) {\n      this.onChange($event);\n    }\n    if (this.onTouched) {\n      this.onTouched();\n    }\n  }\n}\n","import { NgModule } from \"@angular/core\";\nimport { FormsModule } from \"@angular/forms\";\n\nimport { RecaptchaCommonModule } from \"./recaptcha-common.module\";\nimport { RecaptchaValueAccessorDirective } from \"./recaptcha-value-accessor.directive\";\n\n@NgModule({\n  declarations: [RecaptchaValueAccessorDirective],\n  exports: [RecaptchaValueAccessorDirective],\n  imports: [FormsModule, RecaptchaCommonModule],\n})\nexport class RecaptchaFormsModule {}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n\nexport {RecaptchaCommonModule as ɵa} from './lib/recaptcha-common.module';"]}