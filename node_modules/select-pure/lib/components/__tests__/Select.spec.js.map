{"version":3,"file":"Select.spec.js","sourceRoot":"","sources":["../../../src/components/__tests__/Select.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import \"./../Select\";\nimport { LitElement } from \"lit\";\n// import { OptionPureElement } from \"./../../models\";\n// import { KEYS } from \"./../constants\";\n\ndescribe(\"Select component\", () => {\n  beforeAll(() => {\n    class MockedOption extends LitElement {\n      setOnSelectCallback = jest.fn();\n\n      getOption = jest.fn(() => ({\n        // eslint-disable-next-line\n        value: this.getAttribute(\"value\"),\n        // eslint-disable-next-line\n        label: this.getAttribute(\"label\"),\n        select: jest.fn(),\n        unselect: jest.fn(),\n      }));\n    }\n    customElements.define(\"option-pure\", MockedOption);\n  });\n\n  describe(\"render\", () => {\n    it(\"renders native select\", async() => {\n      document.body.innerHTML = `\n        <select-pure>\n          <option-pure value='mocked-UA' label='mocked-Ukraine'></option-pure>\n          <option-pure value='mocked-PL' label='mocked-Poland'></option-pure>\n        </select-pure>\n      `;\n      const select = document.querySelector(\"select-pure\") as LitElement;\n\n      await select.updateComplete;\n      select.connectedCallback();\n      await select.updateComplete;\n\n      const options = select.shadowRoot?.querySelectorAll(\"select option\");\n      expect(options).toHaveLength(2);\n      // @ts-ignore\n      expect(options[0].getAttribute(\"value\")).toEqual(\"mocked-UA\");\n      // @ts-ignore\n      expect(options[0].getAttribute(\"selected\")).toEqual(\"\");\n      // @ts-ignore\n      expect(options[1].getAttribute(\"value\")).toEqual(\"mocked-PL\");\n      // @ts-ignore\n      expect(options[1].getAttribute(\"selected\")).toEqual(null);\n    });\n\n    it(\"renders custom select\", async() => {\n      document.body.innerHTML = `\n        <select-pure>\n          <option-pure value='mocked-PL' label='mocked-Poland'></option-pure>\n          <option-pure value='mocked-UA' label='mocked-Ukraine'></option-pure>\n        </select-pure>\n      `;\n      const select = document.querySelector(\"select-pure\") as LitElement;\n\n      await select.updateComplete;\n      select.connectedCallback();\n      await select.updateComplete;\n\n      const label = select.shadowRoot?.querySelector(\".select .label\");\n\n      expect(label?.getAttribute(\"class\")).toEqual(\"label\");\n\n      const slot = select.shadowRoot?.querySelector(\".dropdown slot\");\n\n      expect(slot).toBeTruthy();\n    });\n    // renders selected option when selected is provided\n    // renders disabled\n  });\n\n  describe(\"select\", () => {\n    // selects an option on click\n    // updates native select\n  });\n\n  describe(\"multiselect\", () => {\n    // renders a multiselect\n    // ability to select multiple options\n    // ability to remove selected options\n  });\n\n  describe(\"API methods\", () => {\n    // disables\n    // enables\n    // selects an option\n  });\n});\n"]}