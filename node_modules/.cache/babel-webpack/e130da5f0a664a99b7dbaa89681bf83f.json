{"ast":null,"code":"// Licensed to the Software Freedom Conservancy (SFC) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The SFC licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/**\n * @fileoverview Defines an {@linkplain cmd.Executor command executor} that\n * communicates with a remote end using HTTP + JSON.\n */\n'use strict';\n\nvar _classCallCheck = require(\"/Users/swapnil0908/Downloads/AdminPortal/node_modules/@babel/runtime/helpers/classCallCheck\").default;\n\nvar _createClass = require(\"/Users/swapnil0908/Downloads/AdminPortal/node_modules/@babel/runtime/helpers/createClass\").default;\n\nvar http = require('http');\n\nvar https = require('https');\n\nvar url = require('url');\n\nvar httpLib = require('../lib/http');\n/**\n * @typedef {{protocol: (?string|undefined),\n *            auth: (?string|undefined),\n *            hostname: (?string|undefined),\n *            host: (?string|undefined),\n *            port: (?string|undefined),\n *            path: (?string|undefined),\n *            pathname: (?string|undefined)}}\n */\n\n\nvar RequestOptions;\n/**\n * @param {string} aUrl The request URL to parse.\n * @return {RequestOptions} The request options.\n * @throws {Error} if the URL does not include a hostname.\n */\n\nfunction getRequestOptions(aUrl) {\n  var options = url.parse(aUrl);\n\n  if (!options.hostname) {\n    throw new Error('Invalid URL: ' + aUrl);\n  } // Delete the search and has portions as they are not used.\n\n\n  options.search = null;\n  options.hash = null;\n  options.path = options.pathname;\n  return options;\n}\n/**\n * A basic HTTP client used to send messages to a remote end.\n *\n * @implements {httpLib.Client}\n */\n\n\nvar HttpClient = /*#__PURE__*/function () {\n  /**\n   * @param {string} serverUrl URL for the WebDriver server to send commands to.\n   * @param {http.Agent=} opt_agent The agent to use for each request.\n   *     Defaults to `http.globalAgent`.\n   * @param {?string=} opt_proxy The proxy to use for the connection to the\n   *     server. Default is to use no proxy.\n   */\n  function HttpClient(serverUrl, opt_agent, opt_proxy) {\n    _classCallCheck(this, HttpClient);\n\n    /** @private {http.Agent} */\n    this.agent_ = opt_agent || null;\n    /**\n     * Base options for each request.\n     * @private {RequestOptions}\n     */\n\n    this.options_ = getRequestOptions(serverUrl);\n    /**\n     * @private {?RequestOptions}\n     */\n\n    this.proxyOptions_ = opt_proxy ? getRequestOptions(opt_proxy) : null;\n  }\n  /** @override */\n\n\n  _createClass(HttpClient, [{\n    key: \"send\",\n    value: function send(httpRequest) {\n      var _this = this;\n\n      var data;\n      var headers = {};\n      httpRequest.headers.forEach(function (value, name) {\n        headers[name] = value;\n      });\n      headers['Content-Length'] = 0;\n\n      if (httpRequest.method == 'POST' || httpRequest.method == 'PUT') {\n        data = JSON.stringify(httpRequest.data);\n        headers['Content-Length'] = Buffer.byteLength(data, 'utf8');\n        headers['Content-Type'] = 'application/json;charset=UTF-8';\n      }\n\n      var path = this.options_.path;\n\n      if (path.endsWith('/') && httpRequest.path.startsWith('/')) {\n        path += httpRequest.path.substring(1);\n      } else {\n        path += httpRequest.path;\n      }\n\n      var parsedPath = url.parse(path);\n      var options = {\n        agent: this.agent_ || null,\n        method: httpRequest.method,\n        auth: this.options_.auth,\n        hostname: this.options_.hostname,\n        port: this.options_.port,\n        protocol: this.options_.protocol,\n        path: parsedPath.path,\n        pathname: parsedPath.pathname,\n        search: parsedPath.search,\n        hash: parsedPath.hash,\n        headers: headers\n      };\n      return new Promise(function (fulfill, reject) {\n        sendRequest(options, fulfill, reject, data, _this.proxyOptions_);\n      });\n    }\n  }]);\n\n  return HttpClient;\n}();\n/**\n * Sends a single HTTP request.\n * @param {!Object} options The request options.\n * @param {function(!httpLib.Response)} onOk The function to call if the\n *     request succeeds.\n * @param {function(!Error)} onError The function to call if the request fails.\n * @param {?string=} opt_data The data to send with the request.\n * @param {?RequestOptions=} opt_proxy The proxy server to use for the request.\n */\n\n\nfunction sendRequest(options, onOk, onError, opt_data, opt_proxy) {\n  var hostname = options.hostname;\n  var port = options.port;\n\n  if (opt_proxy) {\n    var proxy =\n    /** @type {RequestOptions} */\n    opt_proxy; // RFC 2616, section 5.1.2:\n    // The absoluteURI form is REQUIRED when the request is being made to a\n    // proxy.\n\n    var absoluteUri = url.format(options); // RFC 2616, section 14.23:\n    // An HTTP/1.1 proxy MUST ensure that any request message it forwards does\n    // contain an appropriate Host header field that identifies the service\n    // being requested by the proxy.\n\n    var targetHost = options.hostname;\n\n    if (options.port) {\n      targetHost += ':' + options.port;\n    } // Update the request options with our proxy info.\n\n\n    options.headers['Host'] = targetHost;\n    options.path = absoluteUri;\n    options.host = proxy.host;\n    options.hostname = proxy.hostname;\n    options.port = proxy.port;\n\n    if (proxy.auth) {\n      options.headers['Proxy-Authorization'] = 'Basic ' + new Buffer(proxy.auth).toString('base64');\n    }\n  }\n\n  var requestFn = options.protocol === 'https:' ? https.request : http.request;\n  var request = requestFn(options, function onResponse(response) {\n    if (response.statusCode == 302 || response.statusCode == 303) {\n      try {\n        var location = url.parse(response.headers['location']);\n      } catch (ex) {\n        onError(Error('Failed to parse \"Location\" header for server redirect: ' + ex.message + '\\nResponse was: \\n' + new httpLib.Response(response.statusCode, response.headers, '')));\n        return;\n      }\n\n      if (!location.hostname) {\n        location.hostname = hostname;\n        location.port = port;\n      }\n\n      request.abort();\n      sendRequest({\n        method: 'GET',\n        protocol: location.protocol || options.protocol,\n        hostname: location.hostname,\n        port: location.port,\n        path: location.path,\n        pathname: location.pathname,\n        search: location.search,\n        hash: location.hash,\n        headers: {\n          'Accept': 'application/json; charset=utf-8'\n        }\n      }, onOk, onError, undefined, opt_proxy);\n      return;\n    }\n\n    var body = [];\n    response.on('data', body.push.bind(body));\n    response.on('end', function () {\n      var resp = new httpLib.Response(\n      /** @type {number} */\n      response.statusCode,\n      /** @type {!Object<string>} */\n      response.headers, body.join('').replace(/\\0/g, ''));\n      onOk(resp);\n    });\n  });\n  request.on('error', function (e) {\n    if (e.code === 'ECONNRESET') {\n      setTimeout(function () {\n        sendRequest(options, onOk, onError, opt_data, opt_proxy);\n      }, 15);\n    } else {\n      var message = e.message;\n\n      if (e.code) {\n        message = e.code + ' ' + message;\n      }\n\n      onError(new Error(message));\n    }\n  });\n\n  if (opt_data) {\n    request.write(opt_data);\n  }\n\n  request.end();\n} // PUBLIC API\n\n\nexports.Executor = httpLib.Executor;\nexports.HttpClient = HttpClient;\nexports.Request = httpLib.Request;\nexports.Response = httpLib.Response;","map":null,"metadata":{},"sourceType":"script"}