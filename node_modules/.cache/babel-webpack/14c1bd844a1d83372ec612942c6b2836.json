{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/Users/swapnil0908/Downloads/AdminPortal/node_modules/@babel/runtime/regenerator\");\n\nvar _createForOfIteratorHelper = require(\"/Users/swapnil0908/Downloads/AdminPortal/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\").default;\n\nvar _classCallCheck = require(\"/Users/swapnil0908/Downloads/AdminPortal/node_modules/@babel/runtime/helpers/classCallCheck\").default;\n\nvar _createClass = require(\"/Users/swapnil0908/Downloads/AdminPortal/node_modules/@babel/runtime/helpers/createClass\").default;\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar http = require(\"http\");\n\nvar url = require(\"url\");\n\nvar webdriver_commands_1 = require(\"./webdriver_commands\");\n/**\n * A proxy that understands WebDriver commands. Users can add barriers (similar to middleware in\n * express) that will be called before forwarding the request to WebDriver. The proxy will wait for\n * each barrier to finish, calling them in the order in which they were added.\n */\n\n\nvar WebDriverProxy = /*#__PURE__*/function () {\n  function WebDriverProxy(seleniumAddress) {\n    _classCallCheck(this, WebDriverProxy);\n\n    this.barriers = [];\n    this.seleniumAddress = seleniumAddress;\n  }\n\n  _createClass(WebDriverProxy, [{\n    key: \"addBarrier\",\n    value: function addBarrier(barrier) {\n      this.barriers.push(barrier);\n    }\n  }, {\n    key: \"handleRequest\",\n    value: function handleRequest(originalRequest, response) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var command, replyWithError, _iterator, _step, barrier, parsedUrl, options, forwardedRequest, reqData;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                command = webdriver_commands_1.parseWebDriverCommand(originalRequest.url, originalRequest.method);\n\n                replyWithError = function replyWithError(err) {\n                  response.writeHead(502);\n\n                  if (err && err.toString) {\n                    response.write(err.toString());\n                  }\n\n                  response.end();\n                }; // Process barriers in order, one at a time.\n\n\n                _context.prev = 2;\n                _iterator = _createForOfIteratorHelper(this.barriers);\n                _context.prev = 4;\n\n                _iterator.s();\n\n              case 6:\n                if ((_step = _iterator.n()).done) {\n                  _context.next = 12;\n                  break;\n                }\n\n                barrier = _step.value;\n                _context.next = 10;\n                return barrier.onCommand(command);\n\n              case 10:\n                _context.next = 6;\n                break;\n\n              case 12:\n                _context.next = 17;\n                break;\n\n              case 14:\n                _context.prev = 14;\n                _context.t0 = _context[\"catch\"](4);\n\n                _iterator.e(_context.t0);\n\n              case 17:\n                _context.prev = 17;\n\n                _iterator.f();\n\n                return _context.finish(17);\n\n              case 20:\n                _context.next = 26;\n                break;\n\n              case 22:\n                _context.prev = 22;\n                _context.t1 = _context[\"catch\"](2);\n                replyWithError(_context.t1); // Don't call through if a barrier fails.\n\n                return _context.abrupt(\"return\");\n\n              case 26:\n                parsedUrl = url.parse(this.seleniumAddress);\n                options = {};\n                options.method = originalRequest.method;\n                options.path = parsedUrl.path + originalRequest.url;\n                options.hostname = parsedUrl.hostname;\n                options.port = parseInt(parsedUrl.port);\n                options.headers = originalRequest.headers;\n                forwardedRequest = http.request(options); // clang-format off\n\n                reqData = '';\n                originalRequest.on('data', function (d) {\n                  reqData += d;\n                  forwardedRequest.write(d);\n                }).on('end', function () {\n                  command.handleData(reqData);\n                  forwardedRequest.end();\n                }).on('error', replyWithError);\n                forwardedRequest.on('response', function (seleniumResponse) {\n                  response.writeHead(seleniumResponse.statusCode, seleniumResponse.headers);\n                  var respData = '';\n                  seleniumResponse.on('data', function (d) {\n                    respData += d;\n                    response.write(d);\n                  }).on('end', function () {\n                    command.handleResponse(seleniumResponse.statusCode, respData);\n                    response.end();\n                  }).on('error', replyWithError);\n                }).on('error', replyWithError); // clang-format on\n\n              case 37:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[2, 22], [4, 14, 17, 20]]);\n      }));\n    }\n  }]);\n\n  return WebDriverProxy;\n}();\n\nexports.WebDriverProxy = WebDriverProxy; //# sourceMappingURL=webdriver_proxy.js.map","map":null,"metadata":{},"sourceType":"script"}