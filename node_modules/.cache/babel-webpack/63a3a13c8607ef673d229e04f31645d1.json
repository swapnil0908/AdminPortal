{"ast":null,"code":"// Licensed to the Software Freedom Conservancy (SFC) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The SFC licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/**\n * @fileoverview Profile management module. This module is considered internal;\n * users should use {@link selenium-webdriver/firefox}.\n */\n'use strict';\n\nvar _classCallCheck = require(\"/Users/swapnil0908/Downloads/AdminPortal/node_modules/@babel/runtime/helpers/classCallCheck\").default;\n\nvar _createClass = require(\"/Users/swapnil0908/Downloads/AdminPortal/node_modules/@babel/runtime/helpers/createClass\").default;\n\nvar fs = require('fs'),\n    path = require('path'),\n    vm = require('vm');\n\nvar isDevMode = require('../lib/devmode'),\n    Symbols = require('../lib/symbols'),\n    io = require('../io'),\n    _require = require('../io/zip'),\n    Zip = _require.Zip,\n    unzip = _require.unzip,\n    extension = require('./extension');\n/**\n * Parses a user.js file in a Firefox profile directory.\n * @param {string} f Path to the file to parse.\n * @return {!Promise<!Object>} A promise for the parsed preferences as\n *     a JSON object. If the file does not exist, an empty object will be\n *     returned.\n */\n\n\nfunction loadUserPrefs(f) {\n  return io.read(f).then(function onSuccess(contents) {\n    var prefs = {};\n    var context = vm.createContext({\n      'user_pref': function user_pref(key, value) {\n        prefs[key] = value;\n      }\n    });\n    vm.runInContext(contents.toString(), context, f);\n    return prefs;\n  }, function onError(err) {\n    if (err && err.code === 'ENOENT') {\n      return {};\n    }\n\n    throw err;\n  });\n}\n/**\n * @param {!Object} prefs The default preferences to write. Will be\n *     overridden by user.js preferences in the template directory and the\n *     frozen preferences required by WebDriver.\n * @param {string} dir Path to the directory write the file to.\n * @return {!Promise<string>} A promise for the profile directory,\n *     to be fulfilled when user preferences have been written.\n */\n\n\nfunction writeUserPrefs(prefs, dir) {\n  var userPrefs = path.join(dir, 'user.js');\n  return loadUserPrefs(userPrefs).then(function (overrides) {\n    Object.assign(prefs, overrides);\n    var keys = Object.keys(prefs);\n\n    if (!keys.length) {\n      return dir;\n    }\n\n    var contents = Object.keys(prefs).map(function (key) {\n      return 'user_pref(' + JSON.stringify(key) + ', ' + JSON.stringify(prefs[key]) + ');';\n    }).join('\\n');\n    return new Promise(function (resolve, reject) {\n      fs.writeFile(userPrefs, contents, function (err) {\n        err && reject(err) || resolve(dir);\n      });\n    });\n  });\n}\n\n;\n/**\n * Installs a group of extensions in the given profile directory. If the\n * WebDriver extension is not included in this set, the default version\n * bundled with this package will be installed.\n * @param {!Array.<string>} extensions The extensions to install, as a\n *     path to an unpacked extension directory or a path to a xpi file.\n * @param {string} dir The profile directory to install to.\n * @return {!Promise<string>} A promise for the main profile directory\n *     once all extensions have been installed.\n */\n\nfunction installExtensions(extensions, dir) {\n  var next = 0;\n  var extensionDir = path.join(dir, 'extensions');\n  return new Promise(function (fulfill, reject) {\n    io.mkdir(extensionDir).then(installNext, reject);\n\n    function installNext() {\n      if (next >= extensions.length) {\n        fulfill(dir);\n      } else {\n        install(extensions[next++]);\n      }\n    }\n\n    function install(ext) {\n      extension.install(ext, extensionDir).then(function (id) {\n        installNext();\n      }, reject);\n    }\n  });\n}\n/**\n * Models a Firefox profile directory for use with the FirefoxDriver. The\n * {@code Profile} directory uses an in-memory model until\n * {@link #writeToDisk} or {@link #encode} is called.\n */\n\n\nvar Profile = /*#__PURE__*/function () {\n  /**\n   * @param {string=} opt_dir Path to an existing Firefox profile directory to\n   *     use a template for this profile. If not specified, a blank profile will\n   *     be used.\n   */\n  function Profile(opt_dir) {\n    _classCallCheck(this, Profile);\n\n    /** @private {!Object} */\n    this.preferences_ = {};\n    /** @private {(string|undefined)} */\n\n    this.template_ = opt_dir;\n    /** @private {!Array<string>} */\n\n    this.extensions_ = [];\n  }\n  /**\n   * @return {(string|undefined)} Path to an existing Firefox profile directory\n   *     to use as a template when writing this Profile to disk.\n   */\n\n\n  _createClass(Profile, [{\n    key: \"getTemplateDir\",\n    value: function getTemplateDir() {\n      return this.template_;\n    }\n    /**\n     * Registers an extension to be included with this profile.\n     * @param {string} extension Path to the extension to include, as either an\n     *     unpacked extension directory or the path to a xpi file.\n     */\n\n  }, {\n    key: \"addExtension\",\n    value: function addExtension(extension) {\n      this.extensions_.push(extension);\n    }\n    /**\n     * @return {!Array<string>} A list of extensions to install in this profile.\n     */\n\n  }, {\n    key: \"getExtensions\",\n    value: function getExtensions() {\n      return this.extensions_;\n    }\n    /**\n     * Sets a desired preference for this profile.\n     * @param {string} key The preference key.\n     * @param {(string|number|boolean)} value The preference value.\n     * @throws {Error} If attempting to set a frozen preference.\n     */\n\n  }, {\n    key: \"setPreference\",\n    value: function setPreference(key, value) {\n      this.preferences_[key] = value;\n    }\n    /**\n     * Returns the currently configured value of a profile preference. This does\n     * not include any defaults defined in the profile's template directory user.js\n     * file (if a template were specified on construction).\n     * @param {string} key The desired preference.\n     * @return {(string|number|boolean|undefined)} The current value of the\n     *     requested preference.\n     */\n\n  }, {\n    key: \"getPreference\",\n    value: function getPreference(key) {\n      return this.preferences_[key];\n    }\n    /**\n     * @return {!Object} A copy of all currently configured preferences.\n     */\n\n  }, {\n    key: \"getPreferences\",\n    value: function getPreferences() {\n      return Object.assign({}, this.preferences_);\n    }\n    /**\n     * Specifies which host the driver should listen for commands on. If not\n     * specified, the driver will default to \"localhost\". This option should be\n     * specified when \"localhost\" is not mapped to the loopback address\n     * (127.0.0.1) in `/etc/hosts`.\n     *\n     * @param {string} host the host the driver should listen for commands on\n     */\n\n  }, {\n    key: \"setHost\",\n    value: function setHost(host) {\n      this.preferences_['webdriver_firefox_allowed_hosts'] = host;\n    }\n    /**\n     * @return {boolean} Whether the FirefoxDriver is configured to automatically\n     *     accept untrusted SSL certificates.\n     */\n\n  }, {\n    key: \"acceptUntrustedCerts\",\n    value: function acceptUntrustedCerts() {\n      return !!this.preferences_['webdriver_accept_untrusted_certs'];\n    }\n    /**\n     * Sets whether the FirefoxDriver should automatically accept untrusted SSL\n     * certificates.\n     * @param {boolean} value .\n     */\n\n  }, {\n    key: \"setAcceptUntrustedCerts\",\n    value: function setAcceptUntrustedCerts(value) {\n      this.preferences_['webdriver_accept_untrusted_certs'] = !!value;\n    }\n    /**\n     * Sets whether to assume untrusted certificates come from untrusted issuers.\n     * @param {boolean} value .\n     */\n\n  }, {\n    key: \"setAssumeUntrustedCertIssuer\",\n    value: function setAssumeUntrustedCertIssuer(value) {\n      this.preferences_['webdriver_assume_untrusted_issuer'] = !!value;\n    }\n    /**\n     * @return {boolean} Whether to assume untrusted certs come from untrusted\n     *     issuers.\n     */\n\n  }, {\n    key: \"assumeUntrustedCertIssuer\",\n    value: function assumeUntrustedCertIssuer() {\n      return !!this.preferences_['webdriver_assume_untrusted_issuer'];\n    }\n    /**\n     * Writes this profile to disk.\n     * @return {!Promise<string>} A promise for the path to the new profile\n     *     directory.\n     */\n\n  }, {\n    key: \"writeToDisk\",\n    value: function writeToDisk() {\n      var profileDir = io.tmpDir();\n\n      if (this.template_) {\n        profileDir = profileDir.then(function (dir) {\n          return io.copyDir(\n          /** @type {string} */\n          this.template_, dir, /(parent\\.lock|lock|\\.parentlock)/);\n        }.bind(this));\n      } // Freeze preferences for async operations.\n\n\n      var prefs = Object.assign({}, this.preferences_); // Freeze extensions for async operations.\n\n      var extensions = this.extensions_.concat();\n      return profileDir.then(function (dir) {\n        return writeUserPrefs(prefs, dir);\n      }).then(function (dir) {\n        return installExtensions(extensions, dir);\n      });\n    }\n    /**\n     * Write profile to disk, compress its containing directory, and return\n     * it as a Base64 encoded string.\n     *\n     * @return {!Promise<string>} A promise for the encoded profile as\n     *     Base64 string.\n     *\n     */\n\n  }, {\n    key: \"encode\",\n    value: function encode() {\n      return this.writeToDisk().then(function (dir) {\n        var zip = new Zip();\n        return zip.addDir(dir).then(function () {\n          return zip.toBuffer();\n        }).then(function (buf) {\n          return buf.toString('base64');\n        });\n      });\n    }\n    /**\n     * Encodes this profile as a zipped, base64 encoded directory.\n     * @return {!Promise<string>} A promise for the encoded profile.\n     */\n\n  }, {\n    key: Symbols.serialize,\n    value: function value() {\n      return this.encode();\n    }\n  }]);\n\n  return Profile;\n}(); // PUBLIC API\n\n\nexports.Profile = Profile;\nexports.loadUserPrefs = loadUserPrefs;","map":null,"metadata":{},"sourceType":"script"}