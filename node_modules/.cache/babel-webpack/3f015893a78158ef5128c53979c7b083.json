{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/Users/swapnil0908/Downloads/AdminPortal/node_modules/@babel/runtime/helpers/classCallCheck\").default;\n\nvar _createClass = require(\"/Users/swapnil0908/Downloads/AdminPortal/node_modules/@babel/runtime/helpers/createClass\").default;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar child_process_1 = require(\"child_process\");\n\nvar q = require(\"q\");\n\nvar logger_1 = require(\"./logger\");\n\nvar BP_PATH = require.resolve('blocking-proxy/built/lib/bin.js');\n\nvar logger = new logger_1.Logger('BlockingProxy');\n\nvar BlockingProxyRunner = /*#__PURE__*/function () {\n  function BlockingProxyRunner(config) {\n    _classCallCheck(this, BlockingProxyRunner);\n\n    this.config = config;\n  }\n\n  _createClass(BlockingProxyRunner, [{\n    key: \"start\",\n    value: function start() {\n      var _this = this;\n\n      return q.Promise(function (resolve, reject) {\n        _this.checkSupportedConfig();\n\n        var args = ['--fork', '--seleniumAddress', _this.config.seleniumAddress];\n\n        if (_this.config.webDriverLogDir) {\n          args.push('--logDir', _this.config.webDriverLogDir);\n        }\n\n        if (_this.config.highlightDelay) {\n          args.push('--highlightDelay', _this.config.highlightDelay.toString());\n        }\n\n        _this.bpProcess = child_process_1.fork(BP_PATH, args, {\n          silent: true\n        });\n        logger.info('Starting BlockingProxy with args: ' + args.toString());\n\n        _this.bpProcess.on('message', function (data) {\n          _this.port = data['port'];\n          resolve(data['port']);\n        }).on('error', function (err) {\n          reject(new Error('Unable to start BlockingProxy ' + err));\n        }).on('exit', function (code, signal) {\n          reject(new Error('BP exited with ' + code));\n          logger.error('Exited with ' + code);\n          logger.error('signal ' + signal);\n        });\n\n        _this.bpProcess.stdout.on('data', function (msg) {\n          logger.debug(msg.toString().trim());\n        });\n\n        _this.bpProcess.stderr.on('data', function (msg) {\n          logger.error(msg.toString().trim());\n        });\n\n        process.on('exit', function () {\n          _this.bpProcess.kill();\n        });\n      });\n    }\n  }, {\n    key: \"checkSupportedConfig\",\n    value: function checkSupportedConfig() {\n      if (this.config.directConnect) {\n        throw new Error('BlockingProxy not yet supported with directConnect!');\n      }\n    }\n  }]);\n\n  return BlockingProxyRunner;\n}();\n\nexports.BlockingProxyRunner = BlockingProxyRunner; //# sourceMappingURL=bpRunner.js.map","map":null,"metadata":{},"sourceType":"script"}