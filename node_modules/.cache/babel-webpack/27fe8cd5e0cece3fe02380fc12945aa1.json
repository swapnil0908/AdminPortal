{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/Users/swapnil0908/Downloads/AdminPortal/node_modules/@babel/runtime/helpers/classCallCheck\").default;\n\nvar _createClass = require(\"/Users/swapnil0908/Downloads/AdminPortal/node_modules/@babel/runtime/helpers/createClass\").default;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar http = require(\"http\");\n\nvar url = require(\"url\");\n\nvar blockingproxy_1 = require(\"./blockingproxy\");\n\nvar BPClient = /*#__PURE__*/function () {\n  function BPClient(bpUrlValue) {\n    _classCallCheck(this, BPClient);\n\n    var bpUrl = url.parse(bpUrlValue);\n    this.hostname = bpUrl.hostname;\n    this.port = parseInt(bpUrl.port);\n  }\n  /**\n   * Toggle whether waiting for Angular is enabled.\n   *\n   * @param enabled Whether or not to enable waiting for angular.\n   * @returns {Promise<T>}\n   */\n\n\n  _createClass(BPClient, [{\n    key: \"setWaitEnabled\",\n    value: function setWaitEnabled(enabled) {\n      var _this = this;\n\n      return new Promise(function (resolve, reject) {\n        var options = {\n          host: _this.hostname,\n          port: _this.port,\n          method: 'POST',\n          path: \"/\".concat(blockingproxy_1.BP_PREFIX, \"/waitEnabled\")\n        };\n        var request = http.request(options, function (response) {\n          response.on('data', function () {});\n          response.on('error', function (err) {\n            return reject(err);\n          });\n          response.on('end', function () {\n            resolve();\n          });\n        });\n        request.write(JSON.stringify({\n          value: enabled\n        }));\n        request.end();\n      });\n    }\n    /**\n     * Set the selector used to find the root element of the Angular application to wait for. See\n     * AngularWaitBarrier for more details.\n     *\n     * @param selector A selector, or empty string to wait for all Angular apps.\n     */\n\n  }, {\n    key: \"setWaitParams\",\n    value: function setWaitParams(rootSelector) {\n      var _this2 = this;\n\n      return new Promise(function (resolve, reject) {\n        var options = {\n          host: _this2.hostname,\n          port: _this2.port,\n          method: 'POST',\n          path: \"/\".concat(blockingproxy_1.BP_PREFIX, \"/waitParams\")\n        };\n        var request = http.request(options, function (response) {\n          response.on('data', function () {});\n          response.on('error', function (err) {\n            return reject(err);\n          });\n          response.on('end', function () {\n            resolve();\n          });\n        });\n        request.write(JSON.stringify({\n          rootSelector: rootSelector\n        }));\n        request.end();\n      });\n    }\n  }, {\n    key: \"isWaitEnabled\",\n    value: function isWaitEnabled() {\n      var _this3 = this;\n\n      return new Promise(function (res) {\n        var options = {\n          host: _this3.hostname,\n          port: _this3.port,\n          path: \"/\".concat(blockingproxy_1.BP_PREFIX, \"/waitEnabled\")\n        };\n        http.get(options, function (response) {\n          var body = '';\n          response.on('data', function (data) {\n            body += data;\n          });\n          response.on('end', function () {\n            res(JSON.parse(body).value);\n          });\n        });\n      });\n    }\n  }]);\n\n  return BPClient;\n}();\n\nexports.BPClient = BPClient; //# sourceMappingURL=client.js.map","map":null,"metadata":{},"sourceType":"script"}