{"ast":null,"code":"// Licensed to the Software Freedom Conservancy (SFC) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The SFC licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n'use strict';\n\nvar _inherits = require(\"/Users/swapnil0908/Downloads/AdminPortal/node_modules/@babel/runtime/helpers/inherits\").default;\n\nvar _createSuper = require(\"/Users/swapnil0908/Downloads/AdminPortal/node_modules/@babel/runtime/helpers/createSuper\").default;\n\nvar _classCallCheck = require(\"/Users/swapnil0908/Downloads/AdminPortal/node_modules/@babel/runtime/helpers/classCallCheck\").default;\n\nvar _createClass = require(\"/Users/swapnil0908/Downloads/AdminPortal/node_modules/@babel/runtime/helpers/createClass\").default;\n\nvar fs = require('fs');\n\nvar path = require('path');\n\nvar url = require('url');\n\nvar util = require('util');\n\nvar httpUtil = require('../http/util');\n\nvar io = require('../io');\n\nvar exec = require('../io/exec');\n\nvar _require = require('../io/zip'),\n    Zip = _require.Zip;\n\nvar cmd = require('../lib/command');\n\nvar input = require('../lib/input');\n\nvar promise = require('../lib/promise');\n\nvar webdriver = require('../lib/webdriver');\n\nvar net = require('../net');\n\nvar portprober = require('../net/portprober');\n/**\n * @typedef {(string|!Array<string|number|!stream.Stream|null|undefined>)}\n */\n\n\nvar StdIoOptions;\n/**\n * @typedef {(string|!IThenable<string>)}\n */\n\nvar CommandLineFlag;\n/**\n * A record object that defines the configuration options for a DriverService\n * instance.\n *\n * @record\n */\n\nfunction ServiceOptions() {}\n/**\n * Whether the service should only be accessed on this host's loopback address.\n *\n * @type {(boolean|undefined)}\n */\n\n\nServiceOptions.prototype.loopback;\n/**\n * The host name to access the server on. If this option is specified, the\n * {@link #loopback} option will be ignored.\n *\n * @type {(string|undefined)}\n */\n\nServiceOptions.prototype.hostname;\n/**\n * The port to start the server on (must be > 0). If the port is provided as a\n * promise, the service will wait for the promise to resolve before starting.\n *\n * @type {(number|!IThenable<number>)}\n */\n\nServiceOptions.prototype.port;\n/**\n * The arguments to pass to the service. If a promise is provided, the service\n * will wait for it to resolve before starting.\n *\n * @type {!(Array<CommandLineFlag>|IThenable<!Array<CommandLineFlag>>)}\n */\n\nServiceOptions.prototype.args;\n/**\n * The base path on the server for the WebDriver wire protocol (e.g. '/wd/hub').\n * Defaults to '/'.\n *\n * @type {(string|undefined|null)}\n */\n\nServiceOptions.prototype.path;\n/**\n * The environment variables that should be visible to the server process.\n * Defaults to inheriting the current process's environment.\n *\n * @type {(Object<string, string>|undefined)}\n */\n\nServiceOptions.prototype.env;\n/**\n * IO configuration for the spawned server process. For more information, refer\n * to the documentation of `child_process.spawn`.\n *\n * @type {(StdIoOptions|undefined)}\n * @see https://nodejs.org/dist/latest-v4.x/docs/api/child_process.html#child_process_options_stdio\n */\n\nServiceOptions.prototype.stdio;\n/**\n * Manages the life and death of a native executable WebDriver server.\n *\n * It is expected that the driver server implements the\n * https://github.com/SeleniumHQ/selenium/wiki/JsonWireProtocol.\n * Furthermore, the managed server should support multiple concurrent sessions,\n * so that this class may be reused for multiple clients.\n */\n\nvar DriverService = /*#__PURE__*/function () {\n  /**\n   * @param {string} executable Path to the executable to run.\n   * @param {!ServiceOptions} options Configuration options for the service.\n   */\n  function DriverService(executable, options) {\n    _classCallCheck(this, DriverService);\n\n    /** @private {string} */\n    this.executable_ = executable;\n    /** @private {boolean} */\n\n    this.loopbackOnly_ = !!options.loopback;\n    /** @private {(string|undefined)} */\n\n    this.hostname_ = options.hostname;\n    /** @private {(number|!IThenable<number>)} */\n\n    this.port_ = options.port;\n    /**\n     * @private {!(Array<CommandLineFlag>|\n     *             IThenable<!Array<CommandLineFlag>>)}\n     */\n\n    this.args_ = options.args;\n    /** @private {string} */\n\n    this.path_ = options.path || '/';\n    /** @private {!Object<string, string>} */\n\n    this.env_ = options.env || process.env;\n    /**\n     * @private {(string|!Array<string|number|!stream.Stream|null|undefined>)}\n     */\n\n    this.stdio_ = options.stdio || 'ignore';\n    /**\n     * A promise for the managed subprocess, or null if the server has not been\n     * started yet. This promise will never be rejected.\n     * @private {Promise<!exec.Command>}\n     */\n\n    this.command_ = null;\n    /**\n     * Promise that resolves to the server's address or null if the server has\n     * not been started. This promise will be rejected if the server terminates\n     * before it starts accepting WebDriver requests.\n     * @private {Promise<string>}\n     */\n\n    this.address_ = null;\n  }\n  /**\n   * @return {!Promise<string>} A promise that resolves to the server's address.\n   * @throws {Error} If the server has not been started.\n   */\n\n\n  _createClass(DriverService, [{\n    key: \"address\",\n    value: function address() {\n      if (this.address_) {\n        return this.address_;\n      }\n\n      throw Error('Server has not been started.');\n    }\n    /**\n     * Returns whether the underlying process is still running. This does not take\n     * into account whether the process is in the process of shutting down.\n     * @return {boolean} Whether the underlying service process is running.\n     */\n\n  }, {\n    key: \"isRunning\",\n    value: function isRunning() {\n      return !!this.address_;\n    }\n    /**\n     * Starts the server if it is not already running.\n     * @param {number=} opt_timeoutMs How long to wait, in milliseconds, for the\n     *     server to start accepting requests. Defaults to 30 seconds.\n     * @return {!Promise<string>} A promise that will resolve to the server's base\n     *     URL when it has started accepting requests. If the timeout expires\n     *     before the server has started, the promise will be rejected.\n     */\n\n  }, {\n    key: \"start\",\n    value: function start(opt_timeoutMs) {\n      var _this = this;\n\n      if (this.address_) {\n        return this.address_;\n      }\n\n      var timeout = opt_timeoutMs || DriverService.DEFAULT_START_TIMEOUT_MS;\n      var self = this;\n      var resolveCommand;\n      this.command_ = new Promise(function (resolve) {\n        return resolveCommand = resolve;\n      });\n      this.address_ = new Promise(function (resolveAddress, rejectAddress) {\n        resolveAddress(Promise.resolve(_this.port_).then(function (port) {\n          if (port <= 0) {\n            throw Error('Port must be > 0: ' + port);\n          }\n\n          return resolveCommandLineFlags(_this.args_).then(function (args) {\n            var command = exec(self.executable_, {\n              args: args,\n              env: self.env_,\n              stdio: self.stdio_\n            });\n            resolveCommand(command);\n            var earlyTermination = command.result().then(function (result) {\n              var error = result.code == null ? Error('Server was killed with ' + result.signal) : Error('Server terminated early with status ' + result.code);\n              rejectAddress(error);\n              self.address_ = null;\n              self.command_ = null;\n              throw error;\n            });\n            var hostname = self.hostname_;\n\n            if (!hostname) {\n              hostname = !self.loopbackOnly_ && net.getAddress() || net.getLoopbackAddress();\n            }\n\n            var serverUrl = url.format({\n              protocol: 'http',\n              hostname: hostname,\n              port: port + '',\n              pathname: self.path_\n            });\n            return new Promise(function (fulfill, reject) {\n              var cancelToken = earlyTermination.catch(function (e) {\n                return reject(Error(e.message));\n              });\n              httpUtil.waitForServer(serverUrl, timeout, cancelToken).then(function (_) {\n                return fulfill(serverUrl);\n              }, function (err) {\n                if (err instanceof promise.CancellationError) {\n                  fulfill(serverUrl);\n                } else {\n                  reject(err);\n                }\n              });\n            });\n          });\n        }));\n      });\n      return this.address_;\n    }\n    /**\n     * Stops the service if it is not currently running. This function will kill\n     * the server immediately. To synchronize with the active control flow, use\n     * {@link #stop()}.\n     * @return {!Promise} A promise that will be resolved when the server has been\n     *     stopped.\n     */\n\n  }, {\n    key: \"kill\",\n    value: function kill() {\n      if (!this.address_ || !this.command_) {\n        return Promise.resolve(); // Not currently running.\n      }\n\n      var cmd = this.command_;\n      this.address_ = null;\n      this.command_ = null;\n      return cmd.then(function (c) {\n        return c.kill('SIGTERM');\n      });\n    }\n    /**\n     * Schedules a task in the current control flow to stop the server if it is\n     * currently running.\n     * @return {!promise.Thenable} A promise that will be resolved when\n     *     the server has been stopped.\n     */\n\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      return promise.controlFlow().execute(this.kill.bind(this));\n    }\n  }]);\n\n  return DriverService;\n}();\n/**\n * @param {!(Array<CommandLineFlag>|IThenable<!Array<CommandLineFlag>>)} args\n * @return {!Promise<!Array<string>>}\n */\n\n\nfunction resolveCommandLineFlags(args) {\n  // Resolve the outer array, then the individual flags.\n  return Promise.resolve(args).then(\n  /** !Array<CommandLineFlag> */\n  function (args) {\n    return Promise.all(args);\n  });\n}\n/**\n * The default amount of time, in milliseconds, to wait for the server to\n * start.\n * @const {number}\n */\n\n\nDriverService.DEFAULT_START_TIMEOUT_MS = 30 * 1000;\n/**\n * Creates {@link DriverService} objects that manage a WebDriver server in a\n * child process.\n */\n\nDriverService.Builder = /*#__PURE__*/function () {\n  /**\n   * @param {string} exe Path to the executable to use. This executable must\n   *     accept the `--port` flag for defining the port to start the server on.\n   * @throws {Error} If the provided executable path does not exist.\n   */\n  function _class(exe) {\n    _classCallCheck(this, _class);\n\n    if (!fs.existsSync(exe)) {\n      throw Error(\"The specified executable path does not exist: \".concat(exe));\n    }\n    /** @private @const {string} */\n\n\n    this.exe_ = exe;\n    /** @private {!ServiceOptions} */\n\n    this.options_ = {\n      args: [],\n      port: 0,\n      env: null,\n      stdio: 'ignore'\n    };\n  }\n  /**\n   * Define additional command line arguments to use when starting the server.\n   *\n   * @param {...CommandLineFlag} var_args The arguments to include.\n   * @return {!THIS} A self reference.\n   * @this {THIS}\n   * @template THIS\n   */\n\n\n  _createClass(_class, [{\n    key: \"addArguments\",\n    value: function addArguments(var_args) {\n      var args = Array.prototype.slice.call(arguments, 0);\n      this.options_.args = this.options_.args.concat(args);\n      return this;\n    }\n    /**\n     * Sets the host name to access the server on. If specified, the\n     * {@linkplain #setLoopback() loopback} setting will be ignored.\n     *\n     * @param {string} hostname\n     * @return {!DriverService.Builder} A self reference.\n     */\n\n  }, {\n    key: \"setHostname\",\n    value: function setHostname(hostname) {\n      this.options_.hostname = hostname;\n      return this;\n    }\n    /**\n     * Sets whether the service should be accessed at this host's loopback\n     * address.\n     *\n     * @param {boolean} loopback\n     * @return {!DriverService.Builder} A self reference.\n     */\n\n  }, {\n    key: \"setLoopback\",\n    value: function setLoopback(loopback) {\n      this.options_.loopback = loopback;\n      return this;\n    }\n    /**\n     * Sets the base path for WebDriver REST commands (e.g. \"/wd/hub\").\n     * By default, the driver will accept commands relative to \"/\".\n     *\n     * @param {?string} basePath The base path to use, or `null` to use the\n     *     default.\n     * @return {!DriverService.Builder} A self reference.\n     */\n\n  }, {\n    key: \"setPath\",\n    value: function setPath(basePath) {\n      this.options_.path = basePath;\n      return this;\n    }\n    /**\n     * Sets the port to start the server on.\n     *\n     * @param {number} port The port to use, or 0 for any free port.\n     * @return {!DriverService.Builder} A self reference.\n     * @throws {Error} If an invalid port is specified.\n     */\n\n  }, {\n    key: \"setPort\",\n    value: function setPort(port) {\n      if (port < 0) {\n        throw Error(\"port must be >= 0: \".concat(port));\n      }\n\n      this.options_.port = port;\n      return this;\n    }\n    /**\n     * Defines the environment to start the server under. This setting will be\n     * inherited by every browser session started by the server. By default, the\n     * server will inherit the enviroment of the current process.\n     *\n     * @param {(Map<string, string>|Object<string, string>|null)} env The desired\n     *     environment to use, or `null` if the server should inherit the\n     *     current environment.\n     * @return {!DriverService.Builder} A self reference.\n     */\n\n  }, {\n    key: \"setEnvironment\",\n    value: function setEnvironment(env) {\n      if (env instanceof Map) {\n        var tmp = {};\n        env.forEach(function (value, key) {\n          return tmp[key] = value;\n        });\n        env = tmp;\n      }\n\n      this.options_.env = env;\n      return this;\n    }\n    /**\n     * IO configuration for the spawned server process. For more information,\n     * refer to the documentation of `child_process.spawn`.\n     *\n     * @param {StdIoOptions} config The desired IO configuration.\n     * @return {!DriverService.Builder} A self reference.\n     * @see https://nodejs.org/dist/latest-v4.x/docs/api/child_process.html#child_process_options_stdio\n     */\n\n  }, {\n    key: \"setStdio\",\n    value: function setStdio(config) {\n      this.options_.stdio = config;\n      return this;\n    }\n    /**\n     * Creates a new DriverService using this instance's current configuration.\n     *\n     * @return {!DriverService} A new driver service.\n     */\n\n  }, {\n    key: \"build\",\n    value: function build() {\n      var _this2 = this;\n\n      var port = this.options_.port || portprober.findFreePort();\n      var args = Promise.resolve(port).then(function (port) {\n        return _this2.options_.args.concat('--port=' + port);\n      });\n      var options =\n      /** @type {!ServiceOptions} */\n      Object.assign({}, this.options_, {\n        args: args,\n        port: port\n      });\n      return new DriverService(this.exe_, options);\n    }\n  }]);\n\n  return _class;\n}();\n/**\n * Manages the life and death of the\n * <a href=\"http://selenium-release.storage.googleapis.com/index.html\">\n * standalone Selenium server</a>.\n */\n\n\nvar SeleniumServer = /*#__PURE__*/function (_DriverService) {\n  _inherits(SeleniumServer, _DriverService);\n\n  var _super = _createSuper(SeleniumServer);\n\n  /**\n   * @param {string} jar Path to the Selenium server jar.\n   * @param {SeleniumServer.Options=} opt_options Configuration options for the\n   *     server.\n   * @throws {Error} If the path to the Selenium jar is not specified or if an\n   *     invalid port is specified.\n   */\n  function SeleniumServer(jar, opt_options) {\n    _classCallCheck(this, SeleniumServer);\n\n    if (!jar) {\n      throw Error('Path to the Selenium jar not specified');\n    }\n\n    var options = opt_options || {};\n\n    if (options.port < 0) {\n      throw Error('Port must be >= 0: ' + options.port);\n    }\n\n    var port = options.port || portprober.findFreePort();\n    var args = Promise.all([port, options.jvmArgs || [], options.args || []]).then(function (resolved) {\n      var port = resolved[0];\n      var jvmArgs = resolved[1];\n      var args = resolved[2];\n      return jvmArgs.concat('-jar', jar, '-port', port).concat(args);\n    });\n    var java = 'java';\n\n    if (process.env['JAVA_HOME']) {\n      java = path.join(process.env['JAVA_HOME'], 'bin/java');\n    }\n\n    return _super.call(this, java, {\n      loopback: options.loopback,\n      port: port,\n      args: args,\n      path: '/wd/hub',\n      env: options.env,\n      stdio: options.stdio\n    });\n  }\n\n  return SeleniumServer;\n}(DriverService);\n/**\n * Options for the Selenium server:\n *\n * - `loopback` - Whether the server should only be accessed on this host's\n *     loopback address.\n * - `port` - The port to start the server on (must be > 0). If the port is\n *     provided as a promise, the service will wait for the promise to resolve\n *     before starting.\n * - `args` - The arguments to pass to the service. If a promise is provided,\n *     the service will wait for it to resolve before starting.\n * - `jvmArgs` - The arguments to pass to the JVM. If a promise is provided,\n *     the service will wait for it to resolve before starting.\n * - `env` - The environment variables that should be visible to the server\n *     process. Defaults to inheriting the current process's environment.\n * - `stdio` - IO configuration for the spawned server process. For more\n *     information, refer to the documentation of `child_process.spawn`.\n *\n * @typedef {{\n *   loopback: (boolean|undefined),\n *   port: (number|!promise.Promise<number>),\n *   args: !(Array<string>|promise.Promise<!Array<string>>),\n *   jvmArgs: (!Array<string>|\n *             !promise.Promise<!Array<string>>|\n *             undefined),\n *   env: (!Object<string, string>|undefined),\n *   stdio: (string|!Array<string|number|!stream.Stream|null|undefined>|\n *           undefined)\n * }}\n */\n\n\nSeleniumServer.Options;\n/**\n * A {@link webdriver.FileDetector} that may be used when running\n * against a remote\n * [Selenium server](http://selenium-release.storage.googleapis.com/index.html).\n *\n * When a file path on the local machine running this script is entered with\n * {@link webdriver.WebElement#sendKeys WebElement#sendKeys}, this file detector\n * will transfer the specified file to the Selenium server's host; the sendKeys\n * command will be updated to use the transfered file's path.\n *\n * __Note:__ This class depends on a non-standard command supported on the\n * Java Selenium server. The file detector will fail if used with a server that\n * only supports standard WebDriver commands (such as the ChromeDriver).\n *\n * @final\n */\n\nvar FileDetector = /*#__PURE__*/function (_input$FileDetector) {\n  _inherits(FileDetector, _input$FileDetector);\n\n  var _super2 = _createSuper(FileDetector);\n\n  function FileDetector() {\n    _classCallCheck(this, FileDetector);\n\n    return _super2.apply(this, arguments);\n  }\n\n  _createClass(FileDetector, [{\n    key: \"handleFile\",\n    value:\n    /**\n     * Prepares a `file` for use with the remote browser. If the provided path\n     * does not reference a normal file (i.e. it does not exist or is a\n     * directory), then the promise returned by this method will be resolved with\n     * the original file path. Otherwise, this method will upload the file to the\n     * remote server, which will return the file's path on the remote system so\n     * it may be referenced in subsequent commands.\n     *\n     * @override\n     */\n    function handleFile(driver, file) {\n      return io.stat(file).then(function (stats) {\n        if (stats.isDirectory()) {\n          return file; // Not a valid file, return original input.\n        }\n\n        var zip = new Zip();\n        return zip.addFile(file).then(function () {\n          return zip.toBuffer();\n        }).then(function (buf) {\n          return buf.toString('base64');\n        }).then(function (encodedZip) {\n          var command = new cmd.Command(cmd.Name.UPLOAD_FILE).setParameter('file', encodedZip);\n          return driver.schedule(command, 'remote.FileDetector.handleFile(' + file + ')');\n        });\n      }, function (err) {\n        if (err.code === 'ENOENT') {\n          return file; // Not a file; return original input.\n        }\n\n        throw err;\n      });\n    }\n  }]);\n\n  return FileDetector;\n}(input.FileDetector); // PUBLIC API\n\n\nexports.DriverService = DriverService;\nexports.FileDetector = FileDetector;\nexports.SeleniumServer = SeleniumServer;\nexports.ServiceOptions = ServiceOptions; // Exported for API docs.","map":null,"metadata":{},"sourceType":"script"}