{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/Users/swapnil0908/Downloads/AdminPortal/node_modules/@babel/runtime/helpers/classCallCheck\").default;\n\nvar _createClass = require(\"/Users/swapnil0908/Downloads/AdminPortal/node_modules/@babel/runtime/helpers/createClass\").default;\n\nvar _inherits = require(\"/Users/swapnil0908/Downloads/AdminPortal/node_modules/@babel/runtime/helpers/inherits\").default;\n\nvar _createSuper = require(\"/Users/swapnil0908/Downloads/AdminPortal/node_modules/@babel/runtime/helpers/createSuper\").default;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/*\n *  This is an implementation of the Attach Session Driver Provider.\n *  It is responsible for setting up the account object, tearing\n *  it down, and setting up the driver correctly.\n */\n\nvar q = require(\"q\");\n\nvar selenium_webdriver_1 = require(\"selenium-webdriver\");\n\nvar logger_1 = require(\"../logger\");\n\nvar driverProvider_1 = require(\"./driverProvider\");\n\nvar http = require('selenium-webdriver/http');\n\nvar logger = new logger_1.Logger('attachSession');\n\nvar AttachSession = /*#__PURE__*/function (_driverProvider_1$Dri) {\n  _inherits(AttachSession, _driverProvider_1$Dri);\n\n  var _super = _createSuper(AttachSession);\n\n  function AttachSession(config) {\n    _classCallCheck(this, AttachSession);\n\n    return _super.call(this, config);\n  }\n  /**\n   * Configure and launch (if applicable) the object's environment.\n   * @return {q.promise} A promise which will resolve when the environment is\n   *     ready to test.\n   */\n\n\n  _createClass(AttachSession, [{\n    key: \"setupDriverEnv\",\n    value: function setupDriverEnv() {\n      logger.info('Using the selenium server at ' + this.config_.seleniumAddress);\n      logger.info('Using session id - ' + this.config_.seleniumSessionId);\n      return q(undefined);\n    }\n    /**\n     * Getting a new driver by attaching an existing session.\n     *\n     * @public\n     * @return {WebDriver} webdriver instance\n     */\n\n  }, {\n    key: \"getNewDriver\",\n    value: function getNewDriver() {\n      var httpClient = new http.HttpClient(this.config_.seleniumAddress);\n      var executor = new http.Executor(httpClient);\n      var newDriver = selenium_webdriver_1.WebDriver.attachToSession(executor, this.config_.seleniumSessionId);\n      this.drivers_.push(newDriver);\n      return newDriver;\n    }\n    /**\n     * Maintains the existing session and does not quit the driver.\n     *\n     * @public\n     */\n\n  }, {\n    key: \"quitDriver\",\n    value: function quitDriver() {\n      return selenium_webdriver_1.promise.when(undefined);\n    }\n  }]);\n\n  return AttachSession;\n}(driverProvider_1.DriverProvider);\n\nexports.AttachSession = AttachSession; //# sourceMappingURL=attachSession.js.map","map":null,"metadata":{},"sourceType":"script"}