{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/Users/swapnil0908/Downloads/AdminPortal/node_modules/@babel/runtime/helpers/classCallCheck\").default;\n\nvar _createClass = require(\"/Users/swapnil0908/Downloads/AdminPortal/node_modules/@babel/runtime/helpers/createClass\").default;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * The Cli contains the usage and the collection of programs.\n *\n * Printing help for all the programs in the following order:\n * usage, commands, and options. If the options are used in multiple programs,\n * it will list it once.\n */\n\nvar Cli = /*#__PURE__*/function () {\n  function Cli() {\n    _classCallCheck(this, Cli);\n\n    this.programs = {};\n  }\n  /**\n   * Register a program to the command line interface.\n   * @returns The cli for method chaining.\n   */\n\n\n  _createClass(Cli, [{\n    key: \"program\",\n    value: function program(prog) {\n      this.programs[prog.cmd] = prog;\n      return this;\n    }\n    /**\n     * Add a usage for the command line interface.\n     * @returns The cli for method chaining.\n     */\n\n  }, {\n    key: \"usage\",\n    value: function usage(usageText) {\n      this.usageText = usageText;\n      return this;\n    }\n    /**\n     * Prints help for the programs registered to the cli.\n     */\n\n  }, {\n    key: \"printHelp\",\n    value: function printHelp() {\n      console.log('Usage: ' + this.usageText);\n      console.log('\\nCommands:');\n      var cmdDescriptionPos = this.posCmdDescription();\n\n      for (var cmd in this.programs) {\n        var prog = this.programs[cmd];\n        prog.printCmd(cmdDescriptionPos);\n      }\n\n      var descriptionPos = this.posDescription();\n      var defaultPos = this.posDefault();\n      var extOptions = {};\n      console.log('\\nOptions:'); // print all options\n\n      for (var _cmd in this.programs) {\n        var _prog = this.programs[_cmd];\n\n        _prog.printOptions(descriptionPos, defaultPos, extOptions);\n      }\n    }\n    /**\n     * For commands, gets the position where the description should start so they\n     * are aligned.\n     * @returns The position where the command description should start.\n     */\n\n  }, {\n    key: \"posCmdDescription\",\n    value: function posCmdDescription() {\n      var position = -1;\n\n      for (var cmd in this.programs) {\n        position = Math.max(position, cmd.length + 6);\n      }\n\n      return position;\n    }\n    /**\n     * For options, gets the position where the description should start so they\n     * are aligned.\n     * @returns The position where the option description should start.\n     */\n\n  }, {\n    key: \"posDescription\",\n    value: function posDescription() {\n      var position = -1;\n\n      for (var cmd in this.programs) {\n        var prog = this.programs[cmd];\n        position = Math.max(position, prog.posDescription());\n      }\n\n      return position;\n    }\n    /**\n     * For options, get the position where the default values should start so they\n     * are aligned.\n     * @returns The position where the option default values should start.\n     */\n\n  }, {\n    key: \"posDefault\",\n    value: function posDefault() {\n      var position = -1;\n\n      for (var cmd in this.programs) {\n        var prog = this.programs[cmd];\n        position = Math.max(position, prog.posDefault());\n      }\n\n      return position;\n    }\n    /**\n     * Go through all programs and add options to the collection.\n     * @returns The options used in the programs.\n     */\n\n  }, {\n    key: \"getOptions\",\n    value: function getOptions() {\n      var allOptions = {};\n\n      for (var cmd in this.programs) {\n        var prog = this.programs[cmd];\n        allOptions = prog.getOptions_(allOptions);\n      }\n\n      return allOptions;\n    }\n    /**\n     * Get the options used by the programs and create the minimist options\n     * to ensure that minimist parses the values properly.\n     * @returns The options for minimist.\n     */\n\n  }, {\n    key: \"getMinimistOptions\",\n    value: function getMinimistOptions() {\n      var allOptions = this.getOptions();\n      var minimistOptions = {};\n      var minimistBoolean = [];\n      var minimistString = [];\n      var minimistNumber = [];\n      var minimistDefault = {};\n\n      for (var opt in allOptions) {\n        var option = allOptions[opt];\n\n        if (option.type === 'boolean') {\n          minimistBoolean.push(option.opt);\n        } else if (option.type === 'string') {\n          minimistString.push(option.opt);\n        } else if (option.type === 'number') {\n          minimistNumber.push(option.opt);\n        }\n\n        if (typeof option.defaultValue !== 'undefined') {\n          minimistDefault[option.opt] = option.defaultValue;\n        }\n      }\n\n      minimistOptions['boolean'] = minimistBoolean;\n      minimistOptions['string'] = minimistString;\n      minimistOptions['number'] = minimistNumber;\n      minimistOptions['default'] = minimistDefault;\n      return minimistOptions;\n    }\n  }]);\n\n  return Cli;\n}();\n\nexports.Cli = Cli; //# sourceMappingURL=cli.js.map","map":null,"metadata":{},"sourceType":"script"}