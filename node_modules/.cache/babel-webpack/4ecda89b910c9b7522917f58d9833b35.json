{"ast":null,"code":"// Licensed to the Software Freedom Conservancy (SFC) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The SFC licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n'use strict';\n\nvar _classCallCheck = require(\"/Users/swapnil0908/Downloads/AdminPortal/node_modules/@babel/runtime/helpers/classCallCheck\").default;\n\nvar _createClass = require(\"/Users/swapnil0908/Downloads/AdminPortal/node_modules/@babel/runtime/helpers/createClass\").default;\n\nvar jszip = require('jszip');\n\nvar path = require('path');\n\nvar io = require('./index');\n\nvar _require = require('../lib/error'),\n    InvalidArgumentError = _require.InvalidArgumentError;\n/**\n * Manages a zip archive.\n */\n\n\nvar Zip = /*#__PURE__*/function () {\n  function Zip() {\n    _classCallCheck(this, Zip);\n\n    /** @private @const */\n    this.z_ = new jszip();\n    /** @private @const {!Set<!Promise<?>>} */\n\n    this.pendingAdds_ = new Set();\n  }\n  /**\n   * Adds a file to this zip.\n   *\n   * @param {string} filePath path to the file to add.\n   * @param {string=} zipPath path to the file in the zip archive, defaults\n   *     to the basename of `filePath`.\n   * @return {!Promise<?>} a promise that will resolve when added.\n   */\n\n\n  _createClass(Zip, [{\n    key: \"addFile\",\n    value: function addFile(filePath) {\n      var _this = this;\n\n      var zipPath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : path.basename(filePath);\n      var add = io.read(filePath).then(function (buffer) {\n        return _this.z_.file(\n        /** @type {string} */\n        zipPath, buffer);\n      });\n      this.pendingAdds_.add(add);\n      return add.then(function () {\n        return _this.pendingAdds_.delete(add);\n      }, function (e) {\n        _this.pendingAdds_.delete(add);\n\n        throw e;\n      });\n    }\n    /**\n     * Recursively adds a directory and all of its contents to this archive.\n     *\n     * @param {string} dirPath path to the directory to add.\n     * @param {string=} zipPath path to the folder in the archive to add the\n     *     directory contents to. Defaults to the root folder.\n     * @return {!Promise<?>} returns a promise that will resolve when the\n     *     the operation is complete.\n     */\n\n  }, {\n    key: \"addDir\",\n    value: function addDir(dirPath) {\n      var _this2 = this;\n\n      var zipPath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n      return io.walkDir(dirPath).then(function (entries) {\n        var archive = _this2.z_;\n\n        if (zipPath) {\n          archive = archive.folder(zipPath);\n        }\n\n        var files = [];\n        entries.forEach(function (spec) {\n          if (spec.dir) {\n            archive.folder(spec.path);\n          } else {\n            files.push(_this2.addFile(path.join(dirPath, spec.path), path.join(zipPath, spec.path)));\n          }\n        });\n        return Promise.all(files);\n      });\n    }\n    /**\n     * @param {string} path File path to test for within the archive.\n     * @return {boolean} Whether this zip archive contains an entry with the given\n     *     path.\n     */\n\n  }, {\n    key: \"has\",\n    value: function has(path) {\n      return this.z_.file(path) !== null;\n    }\n    /**\n     * Returns the contents of the file in this zip archive with the given `path`.\n     * The returned promise will be rejected with an {@link InvalidArgumentError}\n     * if either `path` does not exist within the archive, or if `path` refers\n     * to a directory.\n     *\n     * @param {string} path the path to the file whose contents to return.\n     * @return {!Promise<!Buffer>} a promise that will be resolved with the file's\n     *     contents as a buffer.\n     */\n\n  }, {\n    key: \"getFile\",\n    value: function getFile(path) {\n      var file = this.z_.file(path);\n\n      if (!file) {\n        return Promise.reject(new InvalidArgumentError(\"No such file in zip archive: \".concat(path)));\n      }\n\n      if (file.dir) {\n        return Promise.reject(new InvalidArgumentError(\"The requested file is a directory: \".concat(path)));\n      }\n\n      return Promise.resolve(file.async('nodebuffer'));\n    }\n    /**\n     * Returns the compressed data for this archive in a buffer. _This method will\n     * not wait for any outstanding {@link #addFile add}\n     * {@link #addDir operations} before encoding the archive._\n     *\n     * @param {string} compression The desired compression.\n     *     Must be `STORE` (the default) or `DEFLATE`.\n     * @return {!Promise<!Buffer>} a promise that will resolve with this archive\n     *     as a buffer.\n     */\n\n  }, {\n    key: \"toBuffer\",\n    value: function toBuffer() {\n      var compression = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'STORE';\n\n      if (compression !== 'STORE' && compression !== 'DEFLATE') {\n        return Promise.reject(new InvalidArgumentError(\"compression must be one of {STORE, DEFLATE}, got \".concat(compression)));\n      }\n\n      return Promise.resolve(this.z_.generateAsync({\n        compression: compression,\n        type: 'nodebuffer'\n      }));\n    }\n  }]);\n\n  return Zip;\n}();\n/**\n * Asynchronously opens a zip archive.\n *\n * @param {string} path to the zip archive to load.\n * @return {!Promise<!Zip>} a promise that will resolve with the opened\n *     archive.\n */\n\n\nfunction load(path) {\n  return io.read(path).then(function (data) {\n    var zip = new Zip();\n    return zip.z_.loadAsync(data).then(function () {\n      return zip;\n    });\n  });\n}\n/**\n * Asynchronously unzips an archive file.\n *\n * @param {string} src path to the source file to unzip.\n * @param {string} dst path to the destination directory.\n * @return {!Promise<string>} a promise that will resolve with `dst` once the\n *     archive has been unzipped.\n */\n\n\nfunction unzip(src, dst) {\n  return load(src).then(function (zip) {\n    var promisedDirs = new Map();\n    var promises = [];\n    zip.z_.forEach(function (relPath, file) {\n      var p;\n\n      if (file.dir) {\n        p = createDir(relPath);\n      } else {\n        var dirname = path.dirname(relPath);\n\n        if (dirname === '.') {\n          p = writeFile(relPath, file);\n        } else {\n          p = createDir(dirname).then(function () {\n            return writeFile(relPath, file);\n          });\n        }\n      }\n\n      promises.push(p);\n    });\n    return Promise.all(promises).then(function () {\n      return dst;\n    });\n\n    function createDir(dir) {\n      var p = promisedDirs.get(dir);\n\n      if (!p) {\n        p = io.mkdirp(path.join(dst, dir));\n        promisedDirs.set(dir, p);\n      }\n\n      return p;\n    }\n\n    function writeFile(relPath, file) {\n      return file.async('nodebuffer').then(function (buffer) {\n        return io.write(path.join(dst, relPath), buffer);\n      });\n    }\n  });\n} // PUBLIC API\n\n\nexports.Zip = Zip;\nexports.load = load;\nexports.unzip = unzip;","map":null,"metadata":{},"sourceType":"script"}