{"ast":null,"code":"\"use strict\";\n\nvar _inherits = require(\"/Users/swapnil0908/Downloads/AdminPortal/node_modules/@babel/runtime/helpers/inherits\").default;\n\nvar _createSuper = require(\"/Users/swapnil0908/Downloads/AdminPortal/node_modules/@babel/runtime/helpers/createSuper\").default;\n\nvar _classCallCheck = require(\"/Users/swapnil0908/Downloads/AdminPortal/node_modules/@babel/runtime/helpers/classCallCheck\").default;\n\nvar _createClass = require(\"/Users/swapnil0908/Downloads/AdminPortal/node_modules/@babel/runtime/helpers/createClass\").default;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/*\n * This is an mock implementation of the Driver Provider.\n * It returns a fake webdriver and never actually contacts a selenium\n * server.\n */\n\nvar q = require(\"q\");\n\nvar selenium_webdriver_1 = require(\"selenium-webdriver\");\n\nvar driverProvider_1 = require(\"./driverProvider\");\n\nvar MockExecutor = /*#__PURE__*/function () {\n  function MockExecutor() {\n    _classCallCheck(this, MockExecutor);\n  }\n\n  _createClass(MockExecutor, [{\n    key: \"execute\",\n    value: function execute(command) {}\n  }]);\n\n  return MockExecutor;\n}();\n\nexports.MockExecutor = MockExecutor;\n\nvar Mock = /*#__PURE__*/function (_driverProvider_1$Dri) {\n  _inherits(Mock, _driverProvider_1$Dri);\n\n  var _super = _createSuper(Mock);\n\n  function Mock(config) {\n    _classCallCheck(this, Mock);\n\n    return _super.call(this, config);\n  }\n  /**\n   * An execute function that returns a promise with a test value.\n   */\n\n\n  _createClass(Mock, [{\n    key: \"execute\",\n    value: function execute() {\n      var deferred = q.defer();\n      deferred.resolve({\n        value: 'test_response'\n      });\n      return deferred.promise;\n    }\n    /**\n     * Configure and launch (if applicable) the object's environment.\n     * @public\n     * @return {q.promise} A promise which will resolve immediately.\n     */\n\n  }, {\n    key: \"setupDriverEnv\",\n    value: function setupDriverEnv() {\n      return q.fcall(function () {});\n    }\n    /**\n     * Create a new driver.\n     *\n     * @public\n     * @override\n     * @return webdriver instance\n     */\n\n  }, {\n    key: \"getNewDriver\",\n    value: function getNewDriver() {\n      var mockSession = new selenium_webdriver_1.Session('test_session_id', {});\n      var newDriver = new selenium_webdriver_1.WebDriver(mockSession, new MockExecutor());\n      this.drivers_.push(newDriver);\n      return newDriver;\n    }\n  }]);\n\n  return Mock;\n}(driverProvider_1.DriverProvider);\n\nexports.Mock = Mock; //# sourceMappingURL=mock.js.map","map":null,"metadata":{},"sourceType":"script"}