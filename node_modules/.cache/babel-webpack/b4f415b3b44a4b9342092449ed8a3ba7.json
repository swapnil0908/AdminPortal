{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/Users/swapnil0908/Downloads/AdminPortal/node_modules/@babel/runtime/helpers/classCallCheck\").default;\n\nvar _createClass = require(\"/Users/swapnil0908/Downloads/AdminPortal/node_modules/@babel/runtime/helpers/createClass\").default;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar os = require(\"os\");\n\nvar path = require(\"path\");\n\nvar cli_1 = require(\"./cli\");\n\nvar logger = new cli_1.Logger('config');\n/**\n * The configuration for webdriver-manager\n *\n * The config.json, package.json, and selenium directory are found in the\n * same location at the root directory in webdriver-manager.\n *\n */\n\nvar Config = /*#__PURE__*/function () {\n  function Config() {\n    _classCallCheck(this, Config);\n  }\n\n  _createClass(Config, null, [{\n    key: \"osArch\",\n    value: function osArch() {\n      return Config.osArch_;\n    }\n  }, {\n    key: \"osType\",\n    value: function osType() {\n      return Config.osType_;\n    }\n  }, {\n    key: \"noProxy\",\n    value: function noProxy() {\n      return Config.noProxy_;\n    }\n  }, {\n    key: \"httpProxy\",\n    value: function httpProxy() {\n      return Config.httpProxy_;\n    }\n  }, {\n    key: \"httpsProxy\",\n    value: function httpsProxy() {\n      return Config.httpsProxy_;\n    }\n  }, {\n    key: \"getConfigFile_\",\n    value: function getConfigFile_() {\n      return path.resolve(Config.dir, '..', Config.configFile);\n    }\n  }, {\n    key: \"getPackageFile_\",\n    value: function getPackageFile_() {\n      return path.resolve(Config.dir, '..', Config.packageFile);\n    }\n  }, {\n    key: \"getSeleniumDir\",\n    value: function getSeleniumDir() {\n      return path.resolve(Config.dir, '..', '..', 'selenium/');\n    }\n  }, {\n    key: \"getBaseDir\",\n    value: function getBaseDir() {\n      return path.resolve(Config.dir, '..', '..');\n    }\n    /**\n     * Get the binary versions from the configuration file.\n     * @returns A map of the versions defined in the configuration file.\n     */\n\n  }, {\n    key: \"binaryVersions\",\n    value: function binaryVersions() {\n      var configFile = require(Config.getConfigFile_());\n\n      var configVersions = {};\n      configVersions.selenium = configFile.webdriverVersions.selenium;\n      configVersions.chrome = configFile.webdriverVersions.chromedriver;\n      configVersions.gecko = configFile.webdriverVersions.geckodriver;\n      configVersions.ie = configFile.webdriverVersions.iedriver;\n      configVersions.android = configFile.webdriverVersions.androidsdk;\n      configVersions.appium = configFile.webdriverVersions.appium;\n      configVersions.maxChrome = configFile.webdriverVersions.maxChromedriver;\n      return configVersions;\n    }\n    /**\n     * Get the CDN urls from the configuration file.\n     * @returns A map of the CDN versions defined in the configuration file.\n     */\n\n  }, {\n    key: \"cdnUrls\",\n    value: function cdnUrls() {\n      var configFile = require(Config.getConfigFile_());\n\n      var configCdnUrls = {};\n      configCdnUrls.selenium = configFile.cdnUrls.selenium;\n      configCdnUrls.chrome = configFile.cdnUrls.chromedriver;\n      configCdnUrls.gecko = configFile.cdnUrls.geckodriver;\n      configCdnUrls.ie = configFile.cdnUrls.iedriver;\n      configCdnUrls.android = configFile.cdnUrls.androidsdk;\n      return configCdnUrls;\n    }\n    /**\n     * Get the package version.\n     */\n\n  }, {\n    key: \"getVersion\",\n    value: function getVersion() {\n      var packageFile = require(Config.getPackageFile_());\n\n      return packageFile.version;\n    }\n  }]);\n\n  return Config;\n}();\n\nConfig.configFile = 'config.json';\nConfig.packageFile = 'package.json';\nConfig.nodeModuleName = 'webdriver-manager';\nConfig.cwd = process.cwd();\nConfig.parentPath = path.resolve(Config.cwd, '..');\nConfig.dir = __dirname;\nConfig.folder = Config.cwd.replace(Config.parentPath, '').substring(1);\nConfig.isProjectVersion = Config.folder === Config.nodeModuleName;\nConfig.isLocalVersion = false;\nConfig.osArch_ = os.arch();\nConfig.osType_ = os.type();\nConfig.noProxy_ = process.env.NO_PROXY || process.env.no_proxy;\nConfig.httpsProxy_ = process.env.HTTPS_PROXY || process.env.https_proxy;\nConfig.httpProxy_ = process.env.HTTP_PROXY || process.env.http_proxy;\nexports.Config = Config; //# sourceMappingURL=config.js.map","map":null,"metadata":{},"sourceType":"script"}