{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/Users/swapnil0908/Downloads/AdminPortal/node_modules/@babel/runtime/helpers/classCallCheck\").default;\n\nvar _createClass = require(\"/Users/swapnil0908/Downloads/AdminPortal/node_modules/@babel/runtime/helpers/createClass\").default;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar http = require(\"http\");\n\nvar url = require(\"url\");\n/**\n * Super dumb and simple WebDriver client. Works with selenium standalone, may or may not work yet\n * directly with other drivers.\n */\n\n\nvar SimpleWebDriverClient = /*#__PURE__*/function () {\n  function SimpleWebDriverClient(seleniumAddress) {\n    _classCallCheck(this, SimpleWebDriverClient);\n\n    this.seleniumAddress = seleniumAddress;\n  }\n  /**\n   * Send an execute script command.\n   *\n   * @param sessionId\n   * @param data A JSON blob with the script and arguments to execute.\n   */\n\n\n  _createClass(SimpleWebDriverClient, [{\n    key: \"execute\",\n    value: function execute(sessionId, data) {\n      var url = ['session', sessionId, 'execute'].join('/');\n      return this.createSeleniumRequest('POST', url, data);\n    }\n    /**\n     * Send an execute async script command.\n     *\n     * @param sessionId\n     * @param data A JSON blob with the script and arguments to execute.\n     */\n\n  }, {\n    key: \"executeAsync\",\n    value: function executeAsync(sessionId, data) {\n      var url = ['session', sessionId, 'execute_async'].join('/');\n      return this.createSeleniumRequest('POST', url, data);\n    }\n    /**\n     * Get the location of an element.\n     *\n     * @param sessionId\n     * @param elementId\n     * @returns Promise<{}> A promise that resolves with the x and y coordinates of the element.\n     */\n\n  }, {\n    key: \"getLocation\",\n    value: function getLocation(sessionId, elementId) {\n      var url = ['session', sessionId, 'element', elementId, 'location'].join('/');\n      return this.createSeleniumRequest('GET', url);\n    }\n    /**\n     * Get the size of an element.\n     *\n     * @param sessionId\n     * @param elementId\n     * @returns Promise<{}> A promise that resolves with the height and width of the element.\n     */\n\n  }, {\n    key: \"getSize\",\n    value: function getSize(sessionId, elementId) {\n      var url = ['session', sessionId, 'element', elementId, 'size'].join('/');\n      return this.createSeleniumRequest('GET', url);\n    }\n  }, {\n    key: \"createSeleniumRequest\",\n    value: function createSeleniumRequest(method, messageUrl, data) {\n      var parsedUrl = url.parse(this.seleniumAddress);\n      var options = {};\n      options['method'] = method;\n      options['path'] = parsedUrl.path + '/' + messageUrl;\n      options['hostname'] = parsedUrl.hostname;\n      options['port'] = parseInt(parsedUrl.port);\n      var request = http.request(options);\n      return new Promise(function (resolve, reject) {\n        if (data) {\n          request.write(data);\n        }\n\n        request.end();\n        request.on('response', function (resp) {\n          var respData = '';\n          resp.on('data', function (d) {\n            respData += d;\n          });\n          resp.on('error', function (err) {\n            reject(err);\n          });\n          resp.on('end', function () {\n            var response = JSON.parse(respData); // Selenium 3.5.x or greater\n\n            if (response.status && response.status > 0) {\n              console.error(\"Got status \".concat(response.status, \" from selenium\"), response.value);\n              reject(JSON.stringify(response.value));\n            } // Selenium 3.0.x\n\n\n            if (response.state && response.state !== 'success') {\n              console.error(\"Got response \".concat(response.state, \" from selenium\"), response.value);\n              reject(JSON.stringify(response.value));\n            }\n\n            resolve(response.value);\n          });\n        });\n      });\n    }\n  }]);\n\n  return SimpleWebDriverClient;\n}();\n\nexports.SimpleWebDriverClient = SimpleWebDriverClient; //# sourceMappingURL=simple_webdriver_client.js.map","map":null,"metadata":{},"sourceType":"script"}