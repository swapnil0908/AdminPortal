{"ast":null,"code":"import _slicedToArray from \"/Users/swapnil0908/Downloads/AdminPortal/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"/Users/swapnil0908/Downloads/AdminPortal/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/swapnil0908/Downloads/AdminPortal/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { InjectionToken, Injectable, Inject, PLATFORM_ID, Optional, EventEmitter, Component, ElementRef, NgZone, Input, HostBinding, Output, NgModule, Directive, forwardRef, HostListener } from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\nimport { of, BehaviorSubject, Subject } from 'rxjs';\nimport { NG_VALUE_ACCESSOR, FormsModule } from '@angular/forms';\nimport * as ɵngcc0 from '@angular/core';\n\nfunction loadScript(renderMode, onLoaded, urlParams, url, nonce) {\n  window.ng2recaptchaloaded = function () {\n    onLoaded(grecaptcha);\n  };\n\n  var script = document.createElement(\"script\");\n  script.innerHTML = \"\";\n  var baseUrl = url || \"https://www.google.com/recaptcha/api.js\";\n  script.src = \"\".concat(baseUrl, \"?render=\").concat(renderMode, \"&onload=ng2recaptchaloaded\").concat(urlParams);\n\n  if (nonce) {\n    script.nonce = nonce;\n  }\n\n  script.async = true;\n  script.defer = true;\n  document.head.appendChild(script);\n}\n\nvar loader = {\n  loadScript: loadScript\n};\nvar RECAPTCHA_LANGUAGE = new InjectionToken(\"recaptcha-language\");\nvar RECAPTCHA_BASE_URL = new InjectionToken(\"recaptcha-base-url\");\nvar RECAPTCHA_NONCE = new InjectionToken(\"recaptcha-nonce-tag\");\nvar RECAPTCHA_SETTINGS = new InjectionToken(\"recaptcha-settings\");\nvar RECAPTCHA_V3_SITE_KEY = new InjectionToken(\"recaptcha-v3-site-key\");\n\nvar RecaptchaLoaderService = /*@__PURE__*/function () {\n  var RecaptchaLoaderService = /*#__PURE__*/function () {\n    function RecaptchaLoaderService( // eslint-disable-next-line @typescript-eslint/ban-types\n    platformId, language, baseUrl, nonce, v3SiteKey) {\n      _classCallCheck(this, RecaptchaLoaderService);\n\n      this.platformId = platformId;\n      this.language = language;\n      this.baseUrl = baseUrl;\n      this.nonce = nonce;\n      this.v3SiteKey = v3SiteKey;\n      this.init();\n      this.ready = isPlatformBrowser(this.platformId) ? RecaptchaLoaderService.ready.asObservable() : of();\n    }\n    /** @internal */\n\n\n    _createClass(RecaptchaLoaderService, [{\n      key: \"init\",\n      value: function init() {\n        if (RecaptchaLoaderService.ready) {\n          return;\n        }\n\n        if (isPlatformBrowser(this.platformId)) {\n          var subject = new BehaviorSubject(null);\n          RecaptchaLoaderService.ready = subject;\n          var langParam = this.language ? \"&hl=\" + this.language : \"\";\n          var renderMode = this.v3SiteKey || \"explicit\";\n          loader.loadScript(renderMode, function (grecaptcha) {\n            return subject.next(grecaptcha);\n          }, langParam, this.baseUrl, this.nonce);\n        }\n      }\n    }]);\n\n    return RecaptchaLoaderService;\n  }();\n\n  RecaptchaLoaderService.ɵfac = function RecaptchaLoaderService_Factory(t) {\n    return new (t || RecaptchaLoaderService)(ɵngcc0.ɵɵinject(PLATFORM_ID), ɵngcc0.ɵɵinject(RECAPTCHA_LANGUAGE, 8), ɵngcc0.ɵɵinject(RECAPTCHA_BASE_URL, 8), ɵngcc0.ɵɵinject(RECAPTCHA_NONCE, 8), ɵngcc0.ɵɵinject(RECAPTCHA_V3_SITE_KEY, 8));\n  };\n\n  RecaptchaLoaderService.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: RecaptchaLoaderService,\n    factory: RecaptchaLoaderService.ɵfac\n  });\n  /**\n   * @internal\n   * @nocollapse\n   */\n\n  RecaptchaLoaderService.ready = null;\n  return RecaptchaLoaderService;\n}();\n\nvar nextId = 0;\n\nvar RecaptchaComponent = /*@__PURE__*/function () {\n  var RecaptchaComponent = /*#__PURE__*/function () {\n    function RecaptchaComponent(elementRef, loader, zone, settings) {\n      _classCallCheck(this, RecaptchaComponent);\n\n      this.elementRef = elementRef;\n      this.loader = loader;\n      this.zone = zone;\n      this.id = \"ngrecaptcha-\".concat(nextId++);\n      this.errorMode = \"default\";\n      this.resolved = new EventEmitter(); // The rename will happen a bit later\n      // eslint-disable-next-line @angular-eslint/no-output-native\n\n      this.error = new EventEmitter();\n\n      if (settings) {\n        this.siteKey = settings.siteKey;\n        this.theme = settings.theme;\n        this.type = settings.type;\n        this.size = settings.size;\n        this.badge = settings.badge;\n      }\n    }\n\n    _createClass(RecaptchaComponent, [{\n      key: \"ngAfterViewInit\",\n      value: function ngAfterViewInit() {\n        var _this = this;\n\n        this.subscription = this.loader.ready.subscribe(function (grecaptcha) {\n          if (grecaptcha != null && grecaptcha.render instanceof Function) {\n            _this.grecaptcha = grecaptcha;\n\n            _this.renderRecaptcha();\n          }\n        });\n      }\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        // reset the captcha to ensure it does not leave anything behind\n        // after the component is no longer needed\n        this.grecaptchaReset();\n\n        if (this.subscription) {\n          this.subscription.unsubscribe();\n        }\n      }\n      /**\n       * Executes the invisible recaptcha.\n       * Does nothing if component's size is not set to \"invisible\".\n       */\n\n    }, {\n      key: \"execute\",\n      value: function execute() {\n        if (this.size !== \"invisible\") {\n          return;\n        }\n\n        if (this.widget != null) {\n          this.grecaptcha.execute(this.widget);\n        } else {\n          // delay execution of recaptcha until it actually renders\n          this.executeRequested = true;\n        }\n      }\n    }, {\n      key: \"reset\",\n      value: function reset() {\n        if (this.widget != null) {\n          if (this.grecaptcha.getResponse(this.widget)) {\n            // Only emit an event in case if something would actually change.\n            // That way we do not trigger \"touching\" of the control if someone does a \"reset\"\n            // on a non-resolved captcha.\n            this.resolved.emit(null);\n          }\n\n          this.grecaptchaReset();\n        }\n      }\n      /** @internal */\n\n    }, {\n      key: \"expired\",\n      value: function expired() {\n        this.resolved.emit(null);\n      }\n      /** @internal */\n\n    }, {\n      key: \"errored\",\n      value: function errored(args) {\n        this.error.emit(args);\n      }\n      /** @internal */\n\n    }, {\n      key: \"captchaResponseCallback\",\n      value: function captchaResponseCallback(response) {\n        this.resolved.emit(response);\n      }\n      /** @internal */\n\n    }, {\n      key: \"grecaptchaReset\",\n      value: function grecaptchaReset() {\n        var _this2 = this;\n\n        if (this.widget != null) {\n          this.zone.runOutsideAngular(function () {\n            return _this2.grecaptcha.reset(_this2.widget);\n          });\n        }\n      }\n      /** @internal */\n\n    }, {\n      key: \"renderRecaptcha\",\n      value: function renderRecaptcha() {\n        var _this3 = this;\n\n        // This `any` can be removed after @types/grecaptcha get updated\n        var renderOptions = {\n          badge: this.badge,\n          callback: function callback(response) {\n            _this3.zone.run(function () {\n              return _this3.captchaResponseCallback(response);\n            });\n          },\n          \"expired-callback\": function expiredCallback() {\n            _this3.zone.run(function () {\n              return _this3.expired();\n            });\n          },\n          sitekey: this.siteKey,\n          size: this.size,\n          tabindex: this.tabIndex,\n          theme: this.theme,\n          type: this.type\n        };\n\n        if (this.errorMode === \"handled\") {\n          renderOptions[\"error-callback\"] = function () {\n            for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n              args[_key] = arguments[_key];\n            }\n\n            _this3.zone.run(function () {\n              return _this3.errored(args);\n            });\n          };\n        }\n\n        this.widget = this.grecaptcha.render(this.elementRef.nativeElement, renderOptions);\n\n        if (this.executeRequested === true) {\n          this.executeRequested = false;\n          this.execute();\n        }\n      }\n    }]);\n\n    return RecaptchaComponent;\n  }();\n\n  RecaptchaComponent.ɵfac = function RecaptchaComponent_Factory(t) {\n    return new (t || RecaptchaComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(RecaptchaLoaderService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(RECAPTCHA_SETTINGS, 8));\n  };\n\n  RecaptchaComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: RecaptchaComponent,\n    selectors: [[\"re-captcha\"]],\n    hostVars: 1,\n    hostBindings: function RecaptchaComponent_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"id\", ctx.id);\n      }\n    },\n    inputs: {\n      id: \"id\",\n      errorMode: \"errorMode\",\n      siteKey: \"siteKey\",\n      theme: \"theme\",\n      type: \"type\",\n      size: \"size\",\n      badge: \"badge\",\n      tabIndex: \"tabIndex\"\n    },\n    outputs: {\n      resolved: \"resolved\",\n      error: \"error\"\n    },\n    exportAs: [\"reCaptcha\"],\n    decls: 0,\n    vars: 0,\n    template: function RecaptchaComponent_Template(rf, ctx) {},\n    encapsulation: 2\n  });\n  return RecaptchaComponent;\n}();\n\nvar RecaptchaCommonModule = /*@__PURE__*/function () {\n  var RecaptchaCommonModule = function RecaptchaCommonModule() {\n    _classCallCheck(this, RecaptchaCommonModule);\n  };\n\n  RecaptchaCommonModule.ɵfac = function RecaptchaCommonModule_Factory(t) {\n    return new (t || RecaptchaCommonModule)();\n  };\n\n  RecaptchaCommonModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: RecaptchaCommonModule\n  });\n  RecaptchaCommonModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({});\n  return RecaptchaCommonModule;\n}();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(RecaptchaCommonModule, {\n    declarations: [RecaptchaComponent],\n    exports: [RecaptchaComponent]\n  });\n})();\n\nvar RecaptchaModule = /*@__PURE__*/function () {\n  var RecaptchaModule = function RecaptchaModule() {\n    _classCallCheck(this, RecaptchaModule);\n  };\n\n  RecaptchaModule.ɵfac = function RecaptchaModule_Factory(t) {\n    return new (t || RecaptchaModule)();\n  };\n\n  RecaptchaModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: RecaptchaModule\n  });\n  RecaptchaModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    providers: [RecaptchaLoaderService],\n    imports: [[RecaptchaCommonModule]]\n  });\n  return RecaptchaModule;\n}();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(RecaptchaModule, {\n    imports: [RecaptchaCommonModule],\n    exports: [RecaptchaComponent]\n  });\n})();\n\nvar ReCaptchaV3Service = /*@__PURE__*/function () {\n  var ReCaptchaV3Service = /*#__PURE__*/function () {\n    function ReCaptchaV3Service(zone, siteKey, // eslint-disable-next-line @typescript-eslint/ban-types\n    platformId, baseUrl, nonce, language) {\n      var _this4 = this;\n\n      _classCallCheck(this, ReCaptchaV3Service);\n\n      /** @internal */\n      this.onLoadComplete = function (grecaptcha) {\n        _this4.grecaptcha = grecaptcha;\n\n        if (_this4.actionBacklog && _this4.actionBacklog.length > 0) {\n          _this4.actionBacklog.forEach(function (_ref) {\n            var _ref2 = _slicedToArray(_ref, 2),\n                action = _ref2[0],\n                subject = _ref2[1];\n\n            return _this4.executeActionWithSubject(action, subject);\n          });\n\n          _this4.actionBacklog = undefined;\n        }\n      };\n\n      this.zone = zone;\n      this.isBrowser = isPlatformBrowser(platformId);\n      this.siteKey = siteKey;\n      this.nonce = nonce;\n      this.language = language;\n      this.baseUrl = baseUrl;\n      this.init();\n    }\n\n    _createClass(ReCaptchaV3Service, [{\n      key: \"onExecute\",\n      get: function get() {\n        if (!this.onExecuteSubject) {\n          this.onExecuteSubject = new Subject();\n          this.onExecuteObservable = this.onExecuteSubject.asObservable();\n        }\n\n        return this.onExecuteObservable;\n      }\n    }, {\n      key: \"onExecuteError\",\n      get: function get() {\n        if (!this.onExecuteErrorSubject) {\n          this.onExecuteErrorSubject = new Subject();\n          this.onExecuteErrorObservable = this.onExecuteErrorSubject.asObservable();\n        }\n\n        return this.onExecuteErrorObservable;\n      }\n      /**\n       * Executes the provided `action` with reCAPTCHA v3 API.\n       * Use the emitted token value for verification purposes on the backend.\n       *\n       * For more information about reCAPTCHA v3 actions and tokens refer to the official documentation at\n       * https://developers.google.com/recaptcha/docs/v3.\n       *\n       * @param {string} action the action to execute\n       * @returns {Observable<string>} an `Observable` that will emit the reCAPTCHA v3 string `token` value whenever ready.\n       * The returned `Observable` completes immediately after emitting a value.\n       */\n\n    }, {\n      key: \"execute\",\n      value: function execute(action) {\n        var subject = new Subject();\n\n        if (this.isBrowser) {\n          if (!this.grecaptcha) {\n            // todo: add to array of later executions\n            if (!this.actionBacklog) {\n              this.actionBacklog = [];\n            }\n\n            this.actionBacklog.push([action, subject]);\n          } else {\n            this.executeActionWithSubject(action, subject);\n          }\n        }\n\n        return subject.asObservable();\n      }\n      /** @internal */\n\n    }, {\n      key: \"executeActionWithSubject\",\n      value: function executeActionWithSubject(action, subject) {\n        var _this5 = this;\n\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        var onError = function onError(error) {\n          _this5.zone.run(function () {\n            subject.error(error);\n\n            if (_this5.onExecuteErrorSubject) {\n              // We don't know any better at this point, unfortunately, so have to resort to `any`\n              // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n              _this5.onExecuteErrorSubject.next({\n                action: action,\n                error: error\n              });\n            }\n          });\n        };\n\n        this.zone.runOutsideAngular(function () {\n          try {\n            _this5.grecaptcha.execute(_this5.siteKey, {\n              action: action\n            }).then(function (token) {\n              _this5.zone.run(function () {\n                subject.next(token);\n                subject.complete();\n\n                if (_this5.onExecuteSubject) {\n                  _this5.onExecuteSubject.next({\n                    action: action,\n                    token: token\n                  });\n                }\n              });\n            }, onError);\n          } catch (e) {\n            onError(e);\n          }\n        });\n      }\n      /** @internal */\n\n    }, {\n      key: \"init\",\n      value: function init() {\n        if (this.isBrowser) {\n          if (\"grecaptcha\" in window) {\n            this.grecaptcha = grecaptcha;\n          } else {\n            var langParam = this.language ? \"&hl=\" + this.language : \"\";\n            loader.loadScript(this.siteKey, this.onLoadComplete, langParam, this.baseUrl, this.nonce);\n          }\n        }\n      }\n    }]);\n\n    return ReCaptchaV3Service;\n  }();\n\n  ReCaptchaV3Service.ɵfac = function ReCaptchaV3Service_Factory(t) {\n    return new (t || ReCaptchaV3Service)(ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(RECAPTCHA_V3_SITE_KEY), ɵngcc0.ɵɵinject(PLATFORM_ID), ɵngcc0.ɵɵinject(RECAPTCHA_BASE_URL, 8), ɵngcc0.ɵɵinject(RECAPTCHA_NONCE, 8), ɵngcc0.ɵɵinject(RECAPTCHA_LANGUAGE, 8));\n  };\n\n  ReCaptchaV3Service.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: ReCaptchaV3Service,\n    factory: ReCaptchaV3Service.ɵfac\n  });\n  return ReCaptchaV3Service;\n}();\n\nvar RecaptchaV3Module = /*@__PURE__*/function () {\n  var RecaptchaV3Module = function RecaptchaV3Module() {\n    _classCallCheck(this, RecaptchaV3Module);\n  };\n\n  RecaptchaV3Module.ɵfac = function RecaptchaV3Module_Factory(t) {\n    return new (t || RecaptchaV3Module)();\n  };\n\n  RecaptchaV3Module.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: RecaptchaV3Module\n  });\n  RecaptchaV3Module.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    providers: [ReCaptchaV3Service]\n  });\n  return RecaptchaV3Module;\n}();\n\nvar RecaptchaValueAccessorDirective = /*@__PURE__*/function () {\n  var RecaptchaValueAccessorDirective = /*#__PURE__*/function () {\n    function RecaptchaValueAccessorDirective(host) {\n      _classCallCheck(this, RecaptchaValueAccessorDirective);\n\n      this.host = host;\n    }\n\n    _createClass(RecaptchaValueAccessorDirective, [{\n      key: \"writeValue\",\n      value: function writeValue(value) {\n        if (!value) {\n          this.host.reset();\n        }\n      }\n    }, {\n      key: \"registerOnChange\",\n      value: function registerOnChange(fn) {\n        this.onChange = fn;\n      }\n    }, {\n      key: \"registerOnTouched\",\n      value: function registerOnTouched(fn) {\n        this.onTouched = fn;\n      }\n    }, {\n      key: \"onResolve\",\n      value: function onResolve($event) {\n        if (this.onChange) {\n          this.onChange($event);\n        }\n\n        if (this.onTouched) {\n          this.onTouched();\n        }\n      }\n    }]);\n\n    return RecaptchaValueAccessorDirective;\n  }();\n\n  RecaptchaValueAccessorDirective.ɵfac = function RecaptchaValueAccessorDirective_Factory(t) {\n    return new (t || RecaptchaValueAccessorDirective)(ɵngcc0.ɵɵdirectiveInject(RecaptchaComponent));\n  };\n\n  RecaptchaValueAccessorDirective.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: RecaptchaValueAccessorDirective,\n    selectors: [[\"re-captcha\", \"formControlName\", \"\"], [\"re-captcha\", \"formControl\", \"\"], [\"re-captcha\", \"ngModel\", \"\"]],\n    hostBindings: function RecaptchaValueAccessorDirective_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"resolved\", function RecaptchaValueAccessorDirective_resolved_HostBindingHandler($event) {\n          return ctx.onResolve($event);\n        });\n      }\n    },\n    features: [ɵngcc0.ɵɵProvidersFeature([{\n      multi: true,\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(function () {\n        return RecaptchaValueAccessorDirective;\n      })\n    }])]\n  });\n  return RecaptchaValueAccessorDirective;\n}();\n\nvar RecaptchaFormsModule = /*@__PURE__*/function () {\n  var RecaptchaFormsModule = function RecaptchaFormsModule() {\n    _classCallCheck(this, RecaptchaFormsModule);\n  };\n\n  RecaptchaFormsModule.ɵfac = function RecaptchaFormsModule_Factory(t) {\n    return new (t || RecaptchaFormsModule)();\n  };\n\n  RecaptchaFormsModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: RecaptchaFormsModule\n  });\n  RecaptchaFormsModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[FormsModule, RecaptchaCommonModule]]\n  });\n  return RecaptchaFormsModule;\n}();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(RecaptchaFormsModule, {\n    declarations: function declarations() {\n      return [RecaptchaValueAccessorDirective];\n    },\n    imports: function imports() {\n      return [FormsModule, RecaptchaCommonModule];\n    },\n    exports: function exports() {\n      return [RecaptchaValueAccessorDirective];\n    }\n  });\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { RECAPTCHA_BASE_URL, RECAPTCHA_LANGUAGE, RECAPTCHA_NONCE, RECAPTCHA_SETTINGS, RECAPTCHA_V3_SITE_KEY, ReCaptchaV3Service, RecaptchaComponent, RecaptchaFormsModule, RecaptchaLoaderService, RecaptchaModule, RecaptchaV3Module, RecaptchaValueAccessorDirective, RecaptchaCommonModule as ɵa }; //# sourceMappingURL=ng-recaptcha.js.map","map":null,"metadata":{},"sourceType":"module"}