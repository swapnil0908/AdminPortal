{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/Users/swapnil0908/Downloads/AdminPortal/node_modules/@babel/runtime/helpers/classCallCheck\").default;\n\nvar _createClass = require(\"/Users/swapnil0908/Downloads/AdminPortal/node_modules/@babel/runtime/helpers/createClass\").default;\n\nvar _inherits = require(\"/Users/swapnil0908/Downloads/AdminPortal/node_modules/@babel/runtime/helpers/inherits\").default;\n\nvar _createSuper = require(\"/Users/swapnil0908/Downloads/AdminPortal/node_modules/@babel/runtime/helpers/createSuper\").default;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar q = require(\"q\");\n\nvar util = require(\"util\");\n\nvar exitCodes_1 = require(\"../exitCodes\");\n\nvar logger_1 = require(\"../logger\");\n\nvar driverProvider_1 = require(\"./driverProvider\");\n\nvar BrowserstackClient = require('browserstack');\n\nvar logger = new logger_1.Logger('browserstack');\n\nvar BrowserStack = /*#__PURE__*/function (_driverProvider_1$Dri) {\n  _inherits(BrowserStack, _driverProvider_1$Dri);\n\n  var _super = _createSuper(BrowserStack);\n\n  function BrowserStack(config) {\n    _classCallCheck(this, BrowserStack);\n\n    return _super.call(this, config);\n  }\n  /**\n   * Hook to update the BrowserStack job status.\n   * @public\n   * @param {Object} update\n   * @return {q.promise} A promise that will resolve when the update is complete.\n   */\n\n\n  _createClass(BrowserStack, [{\n    key: \"updateJob\",\n    value: function updateJob(update) {\n      var _this = this;\n\n      var deferredArray = this.drivers_.map(function (driver) {\n        var deferred = q.defer();\n        driver.getSession().then(function (session) {\n          // Fetching BrowserStack session details.\n          _this.browserstackClient.getSession(session.getId(), function (error, automate_session) {\n            if (error) {\n              logger.info('BrowserStack results available at ' + 'https://www.browserstack.com/automate');\n            } else {\n              if (automate_session && automate_session.browser_url) {\n                logger.info('BrowserStack results available at ' + automate_session.browser_url);\n              } else {\n                logger.info('BrowserStack results available at ' + 'https://www.browserstack.com/automate');\n              }\n            }\n          });\n\n          var jobStatus = update.passed ? 'completed' : 'error';\n          var statusObj = {\n            status: jobStatus\n          }; // Updating status of BrowserStack session.\n\n          _this.browserstackClient.updateSession(session.getId(), statusObj, function (error, automate_session) {\n            if (error) {\n              throw new exitCodes_1.BrowserError(logger, 'Error updating BrowserStack pass/fail status: ' + util.inspect(error));\n            } else {\n              logger.info(automate_session);\n              deferred.resolve();\n            }\n          });\n        });\n        return deferred.promise;\n      });\n      return q.all(deferredArray);\n    }\n    /**\n     * Configure and launch (if applicable) the object's environment.\n     * @return {q.promise} A promise which will resolve when the environment is\n     *     ready to test.\n     */\n\n  }, {\n    key: \"setupDriverEnv\",\n    value: function setupDriverEnv() {\n      var deferred = q.defer();\n      this.config_.capabilities['browserstack.user'] = this.config_.browserstackUser;\n      this.config_.capabilities['browserstack.key'] = this.config_.browserstackKey;\n      this.config_.seleniumAddress = 'http://hub.browserstack.com/wd/hub';\n      this.browserstackClient = BrowserstackClient.createAutomateClient({\n        username: this.config_.browserstackUser,\n        password: this.config_.browserstackKey,\n        proxy: this.config_.browserstackProxy\n      }); // Append filename to capabilities.name so that it's easier to identify\n      // tests.\n\n      if (this.config_.capabilities.name && this.config_.capabilities.shardTestFiles) {\n        this.config_.capabilities.name += ':' + this.config_.specs.toString().replace(/^.*[\\\\\\/]/, '');\n      }\n\n      logger.info('Using BrowserStack selenium server at ' + this.config_.seleniumAddress);\n      deferred.resolve();\n      return deferred.promise;\n    }\n  }]);\n\n  return BrowserStack;\n}(driverProvider_1.DriverProvider);\n\nexports.BrowserStack = BrowserStack; //# sourceMappingURL=browserStack.js.map","map":null,"metadata":{},"sourceType":"script"}