{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/Users/swapnil0908/Downloads/AdminPortal/node_modules/@babel/runtime/helpers/classCallCheck\").default;\n\nvar _createClass = require(\"/Users/swapnil0908/Downloads/AdminPortal/node_modules/@babel/runtime/helpers/createClass\").default;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar fs = require(\"fs\");\n\nvar path = require(\"path\");\n\nvar webdriver_commands_1 = require(\"./webdriver_commands\"); // Generate a random 8 character ID to avoid collisions.\n\n\nfunction getLogId() {\n  return Math.floor(Math.random() * Number.MAX_SAFE_INTEGER).toString(36).slice(0, 8);\n} // Super proprietary left pad implementation. Do not copy plzkthx.\n\n\nfunction leftPad(field) {\n  var fieldWidth = 6;\n  var padding = fieldWidth - field.length;\n\n  if (padding > 0) {\n    return ' '.repeat(padding) + field;\n  }\n\n  return field;\n}\n\nvar FINDERS = [webdriver_commands_1.CommandName.FindElement, webdriver_commands_1.CommandName.FindElementFromElement, webdriver_commands_1.CommandName.FindElements, webdriver_commands_1.CommandName.FindElementsFromElement];\nvar READERS = [webdriver_commands_1.CommandName.GetElementTagName, webdriver_commands_1.CommandName.GetElementText, webdriver_commands_1.CommandName.GetElementAttribute, webdriver_commands_1.CommandName.GetElementProperty, webdriver_commands_1.CommandName.GetElementCSSValue, webdriver_commands_1.CommandName.GetElementRect];\nvar PAD = '    ';\n/**\n * Logs WebDriver commands, transforming the command into a user-friendly description.\n */\n\nvar WebDriverLogger = /*#__PURE__*/function () {\n  function WebDriverLogger() {\n    _classCallCheck(this, WebDriverLogger);\n\n    this.logName = \"webdriver_log_\".concat(getLogId(), \".txt\");\n  }\n  /**\n   * Start logging to the specified directory. Will create a file named\n   * 'webdriver_log_<process id>.txt'\n   *\n   * @param logDir The directory to create log files in.\n   */\n\n\n  _createClass(WebDriverLogger, [{\n    key: \"setLogDir\",\n    value: function setLogDir(logDir) {\n      this.logStream = fs.createWriteStream(path.join(logDir, this.logName), {\n        flags: 'a'\n      });\n    }\n    /**\n     * Logs a webdriver command to the log file.\n     *\n     * @param command The command to log.\n     */\n\n  }, {\n    key: \"logWebDriverCommand\",\n    value: function logWebDriverCommand(command) {\n      var _this = this;\n\n      if (!this.logStream) {\n        return;\n      }\n\n      var logLine;\n      logLine = \"\".concat(this.timestamp(), \" \");\n      var started = Date.now();\n      command.on('response', function () {\n        var done = Date.now();\n        var elapsed = leftPad(done - started + '');\n        logLine += \"| \".concat(elapsed, \"ms \");\n\n        if (command.getParam('sessionId')) {\n          var session = command.getParam('sessionId').slice(0, 6);\n          logLine += \"| \".concat(session, \" \");\n        } else if (command.commandName == webdriver_commands_1.CommandName.NewSession) {\n          // Only for new session commands, the sessionId is in the response.\n          var _session = command.responseData['sessionId'].slice(0, 6);\n\n          logLine += \"| \".concat(_session, \" \");\n        }\n\n        if (command.commandName == webdriver_commands_1.CommandName.UNKNOWN) {\n          logLine += \"| \".concat(command.url);\n        } else {\n          logLine += \"| \".concat(webdriver_commands_1.CommandName[command.commandName]);\n        }\n\n        if (command.commandName == webdriver_commands_1.CommandName.Go) {\n          logLine += ' ' + command.data['url'];\n        } else if (command.getParam('elementId')) {\n          logLine += \" (\".concat(command.getParam('elementId'), \")\");\n        }\n\n        logLine += '\\n';\n\n        _this.logStream.write(logLine);\n\n        _this.renderData(command);\n\n        _this.renderResponse(command);\n      });\n    }\n    /**\n     * Log an arbitrary event to the log file.\n     *\n     * @param msg The message to log.\n     * @param sessionId The session id associated with the event.\n     * @param elapsedMs How long the event took, in ms.\n     */\n\n  }, {\n    key: \"logEvent\",\n    value: function logEvent(msg, sessionId, elapsedMs) {\n      var elapsed = leftPad(elapsedMs.toString());\n      var logLine = \"\".concat(this.timestamp(), \" | \").concat(elapsed, \"ms | \").concat(sessionId.slice(0, 6), \" | \").concat(msg, \"\\n\");\n      this.logStream.write(logLine);\n    }\n  }, {\n    key: \"renderData\",\n    value: function renderData(command) {\n      var dataLine = '';\n\n      if (command.commandName === webdriver_commands_1.CommandName.NewSession) {\n        dataLine = JSON.stringify(command.data['desiredCapabilities']);\n      } else if (command.commandName === webdriver_commands_1.CommandName.ElementSendKeys) {\n        var value = command.data['value'].join('');\n        dataLine = \"Send: \".concat(value);\n      } else if (FINDERS.indexOf(command.commandName) !== -1) {\n        var using = command.data['using'];\n        var _value = command.data['value'];\n        dataLine = \"Using \".concat(using, \" '\").concat(_value, \"'\");\n      }\n\n      if (dataLine) {\n        this.logStream.write(PAD + dataLine + '\\n');\n      }\n    }\n  }, {\n    key: \"renderResponse\",\n    value: function renderResponse(command) {\n      var respLine = '';\n      var data = command.responseData;\n\n      if (data['status'] > 0) {\n        respLine = \"ERROR \".concat(data['status'], \": \").concat(data['value']['message']);\n      } else if (FINDERS.indexOf(command.commandName) !== -1) {\n        var els = command.responseData['value'];\n\n        if (!Array.isArray(els)) {\n          els = [els];\n        }\n\n        els = els.map(function (e) {\n          return e['ELEMENT'];\n        });\n        respLine = 'Elements: ' + els;\n      } else if (READERS.indexOf(command.commandName) !== -1) {\n        respLine = command.responseData['value'];\n\n        if (typeof respLine == 'object') {\n          respLine = JSON.stringify(respLine);\n        }\n      }\n\n      if (respLine) {\n        this.logStream.write(PAD + respLine + '\\n');\n      }\n    }\n  }, {\n    key: \"timestamp\",\n    value: function timestamp() {\n      var d = new Date();\n      var hours = d.getHours() < 10 ? '0' + d.getHours() : d.getHours();\n      var minutes = d.getMinutes() < 10 ? '0' + d.getMinutes() : d.getMinutes();\n      var seconds = d.getSeconds() < 10 ? '0' + d.getSeconds() : d.getSeconds();\n      var millis = d.getMilliseconds().toString();\n      millis = '000'.slice(0, 3 - millis.length) + millis;\n      return \"\".concat(hours, \":\").concat(minutes, \":\").concat(seconds, \".\").concat(millis);\n    }\n  }]);\n\n  return WebDriverLogger;\n}();\n\nexports.WebDriverLogger = WebDriverLogger; //# sourceMappingURL=webdriver_logger.js.map","map":null,"metadata":{},"sourceType":"script"}