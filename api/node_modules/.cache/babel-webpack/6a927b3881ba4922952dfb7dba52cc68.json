{"ast":null,"code":"(function (global) {\n  DEBUG = false;\n  var debug = DEBUG ? console.log.bind(console) : function () {};\n\n  if (typeof module === 'object' && typeof module.exports === 'object') {\n    require('../lib/Pure-JavaScript-HTML5-Parser/htmlparser.js');\n  }\n\n  function q(v) {\n    return '\"' + v + '\"';\n  }\n\n  function removeDOCTYPE(html) {\n    return html.replace(/<\\?xml.*\\?>\\n/, '').replace(/<!doctype.*\\>\\n/, '').replace(/<!DOCTYPE.*\\>\\n/, '');\n  }\n\n  global.html2json = function html2json(html) {\n    html = removeDOCTYPE(html);\n    var bufArray = [];\n    var results = {\n      node: 'root',\n      child: []\n    };\n    HTMLParser(html, {\n      start: function start(tag, attrs, unary) {\n        debug(tag, attrs, unary); // node for this element\n\n        var node = {\n          node: 'element',\n          tag: tag\n        };\n\n        if (attrs.length !== 0) {\n          node.attr = attrs.reduce(function (pre, attr) {\n            var name = attr.name;\n            var value = attr.value; // has multi attibutes\n            // make it array of attribute\n\n            if (value.match(/ /)) {\n              value = value.split(' ');\n            } // if attr already exists\n            // merge it\n\n\n            if (pre[name]) {\n              if (Array.isArray(pre[name])) {\n                // already array, push to last\n                pre[name].push(value);\n              } else {\n                // single value, make it array\n                pre[name] = [pre[name], value];\n              }\n            } else {\n              // not exist, put it\n              pre[name] = value;\n            }\n\n            return pre;\n          }, {});\n        }\n\n        if (unary) {\n          // if this tag dosen't have end tag\n          // like <img src=\"hoge.png\"/>\n          // add to parents\n          var parent = bufArray[0] || results;\n\n          if (parent.child === undefined) {\n            parent.child = [];\n          }\n\n          parent.child.push(node);\n        } else {\n          bufArray.unshift(node);\n        }\n      },\n      end: function end(tag) {\n        debug(tag); // merge into parent tag\n\n        var node = bufArray.shift();\n        if (node.tag !== tag) console.error('invalid state: mismatch end tag');\n\n        if (bufArray.length === 0) {\n          results.child.push(node);\n        } else {\n          var parent = bufArray[0];\n\n          if (parent.child === undefined) {\n            parent.child = [];\n          }\n\n          parent.child.push(node);\n        }\n      },\n      chars: function chars(text) {\n        debug(text);\n        var node = {\n          node: 'text',\n          text: text\n        };\n\n        if (bufArray.length === 0) {\n          results.child.push(node);\n        } else {\n          var parent = bufArray[0];\n\n          if (parent.child === undefined) {\n            parent.child = [];\n          }\n\n          parent.child.push(node);\n        }\n      },\n      comment: function comment(text) {\n        debug(text);\n        var node = {\n          node: 'comment',\n          text: text\n        };\n        var parent = bufArray[0];\n\n        if (parent.child === undefined) {\n          parent.child = [];\n        }\n\n        parent.child.push(node);\n      }\n    });\n    return results;\n  };\n\n  global.json2html = function json2html(json) {\n    // Empty Elements - HTML 4.01\n    var empty = ['area', 'base', 'basefont', 'br', 'col', 'frame', 'hr', 'img', 'input', 'isindex', 'link', 'meta', 'param', 'embed'];\n    var child = '';\n\n    if (json.child) {\n      child = json.child.map(function (c) {\n        return json2html(c);\n      }).join('');\n    }\n\n    var attr = '';\n\n    if (json.attr) {\n      attr = Object.keys(json.attr).map(function (key) {\n        var value = json.attr[key];\n        if (Array.isArray(value)) value = value.join(' ');\n        return key + '=' + q(value);\n      }).join(' ');\n      if (attr !== '') attr = ' ' + attr;\n    }\n\n    if (json.node === 'element') {\n      var tag = json.tag;\n\n      if (empty.indexOf(tag) > -1) {\n        // empty element\n        return '<' + json.tag + attr + '/>';\n      } // non empty element\n\n\n      var open = '<' + json.tag + attr + '>';\n      var close = '</' + json.tag + '>';\n      return open + child + close;\n    }\n\n    if (json.node === 'text') {\n      return json.text;\n    }\n\n    if (json.node === 'comment') {\n      return '<!--' + json.text + '-->';\n    }\n\n    if (json.node === 'root') {\n      return child;\n    }\n  };\n})(this);","map":null,"metadata":{},"sourceType":"script"}